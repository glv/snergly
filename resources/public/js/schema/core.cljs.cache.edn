;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{atom Symbol fn defn defmethod letfn Keyword defrecord}, :name schema.core, :imports nil, :requires {collection schema.spec.collection, schema.spec.collection schema.spec.collection, schema.spec.core schema.spec.core, variant schema.spec.variant, leaf schema.spec.leaf, schema.spec.variant schema.spec.variant, schema.spec.leaf schema.spec.leaf, spec schema.spec.core, str clojure.string, utils schema.utils, clojure.string clojure.string, schema.utils schema.utils}, :uses nil, :defs {map->Queue {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 857, :column 25, :end-line 857, :end-column 30, :internal-ctor true, :factory :map, :arglists (quote ([G__20107]))}, :name schema.core/map->Queue, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 30, :method-params ([G__20107]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 857, :end-line 857, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20107]))}, ->Predicate {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 291, :column 25, :end-line 291, :end-column 34, :internal-ctor true, :factory :positional, :arglists (quote ([p? pred-name]))}, :name schema.core/->Predicate, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 34, :method-params ([p? pred-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 291, :end-line 291, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p? pred-name]))}, ConditionalSchema {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/ConditionalSchema, :file "resources/public/js/schema/core.cljs", :end-column 42, :type true, :column 25, :internal-ctor true, :line 469, :record true, :end-line 469, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, arity {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 1019, :column 21, :end-line 1019, :end-column 26, :private true, :arglists (quote ([input-schema]))}, :private true, :name schema.core/arity, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 26, :method-params ([input-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1019, :end-line 1019, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input-schema]))}, map->FnSchema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 1011, :column 25, :end-line 1011, :end-column 33, :internal-ctor true, :factory :map, :arglists (quote ([G__20158]))}, :name schema.core/map->FnSchema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 33, :method-params ([G__20158]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 1011, :end-line 1011, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20158]))}, map-error {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 797, :column 8, :end-line 797, :end-column 17, :private true, :arglists (quote ([]))}, :private true, :name schema.core/map-error, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 797, :end-line 797, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ->One {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 882, :column 25, :end-line 882, :end-column 28, :internal-ctor true, :factory :positional, :arglists (quote ([schema optional? name]))}, :name schema.core/->One, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 28, :method-params ([schema optional? name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 882, :end-line 882, :max-fixed-arity 3, :fn-var true, :arglists (quote ([schema optional? name]))}, named {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 434, :column 20, :end-line 434, :end-column 25, :arglists (quote ([schema name])), :doc "A value that must satisfy schema, and has a name for documentation purposes."}, :name schema.core/named, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 25, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 434, :end-line 434, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "A value that must satisfy schema, and has a name for documentation purposes."}, optional-key {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 712, :column 20, :end-line 712, :end-column 32, :arglists (quote ([k])), :doc "An optional key in a map"}, :name schema.core/optional-key, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 32, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 712, :end-line 712, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "An optional key in a map"}, instance-precondition {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 168, :column 20, :end-line 168, :end-column 41, :arglists (quote ([s klass]))}, :name schema.core/instance-precondition, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 41, :method-params ([s klass]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s klass]))}, Protocol {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Protocol, :file "resources/public/js/schema/core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 318, :record true, :end-line 318, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Atomic {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 658, :column 25, :end-line 658, :end-column 31, :internal-ctor true, :factory :map, :arglists (quote ([G__20017]))}, :name schema.core/map->Atomic, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 31, :method-params ([G__20017]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 658, :end-line 658, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20017]))}, map->AnythingSchema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 235, :column 25, :end-line 235, :end-column 39, :internal-ctor true, :factory :map, :arglists (quote ([G__19791]))}, :name schema.core/map->AnythingSchema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 39, :method-params ([G__19791]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 235, :end-line 235, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19791]))}, map-explain {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 808, :column 21, :end-line 808, :end-column 32, :private true, :arglists (quote ([this]))}, :private true, :name schema.core/map-explain, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 32, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 808, :end-line 808, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, atom {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 668, :column 20, :end-line 668, :end-column 24, :arglists (quote ([schema])), :doc "An atom containing a value matching 'schema'."}, :name schema.core/atom, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 24, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 668, :end-line 668, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "An atom containing a value matching 'schema'."}, Maybe {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Maybe, :file "resources/public/js/schema/core.cljs", :end-column 30, :type true, :column 25, :internal-ctor true, :line 409, :record true, :end-line 409, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, MapEntry {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/MapEntry, :file "resources/public/js/schema/core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 732, :record true, :end-line 732, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, One {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/One, :file "resources/public/js/schema/core.cljs", :end-column 28, :type true, :column 25, :internal-ctor true, :line 882, :record true, :end-line 882, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->Isa {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 263, :column 25, :end-line 263, :end-column 28, :internal-ctor true, :factory :positional, :arglists (quote ([h parent]))}, :name schema.core/->Isa, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 28, :method-params ([h parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 263, :end-line 263, :max-fixed-arity 2, :fn-var true, :arglists (quote ([h parent]))}, map->ConditionalSchema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 469, :column 25, :end-line 469, :end-column 42, :internal-ctor true, :factory :map, :arglists (quote ([G__19909]))}, :name schema.core/map->ConditionalSchema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 42, :method-params ([G__19909]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 469, :end-line 469, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19909]))}, NamedSchema {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/NamedSchema, :file "resources/public/js/schema/core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 426, :record true, :end-line 426, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->MapEntry {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 732, :column 25, :end-line 732, :end-column 33, :internal-ctor true, :factory :map, :arglists (quote ([G__20041]))}, :name schema.core/map->MapEntry, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 33, :method-params ([G__20041]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 732, :end-line 732, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20041]))}, required-key? {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 706, :column 20, :end-line 706, :end-column 33, :arglists (quote ([ks]))}, :name schema.core/required-key?, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 33, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 706, :end-line 706, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}, ->Both {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 584, :column 25, :end-line 584, :end-column 29, :internal-ctor true, :factory :positional, :arglists (quote ([schemas]))}, :name schema.core/->Both, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 29, :method-params ([schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 584, :end-line 584, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schemas]))}, schema-with-name {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 1058, :column 20, :end-line 1058, :end-column 36, :arglists (quote ([schema name])), :doc "Records name in schema's metadata."}, :name schema.core/schema-with-name, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 36, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1058, :end-line 1058, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "Records name in schema's metadata."}, atom? {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 654, :column 8, :end-line 654, :end-column 13, :private true, :arglists (quote ([x]))}, :private true, :name schema.core/atom?, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 654, :end-line 654, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, Symbol {:name schema.core/Symbol, :file "resources/public/js/schema/core.cljs", :line 381, :column 1, :end-line 381, :end-column 12, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 381, :column 6, :end-line 381, :end-column 12}, :doc "A symbol"}, ->Constrained {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 560, :column 25, :end-line 560, :end-column 36, :internal-ctor true, :factory :positional, :arglists (quote ([schema postcondition post-name]))}, :name schema.core/->Constrained, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 36, :method-params ([schema postcondition post-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 560, :end-line 560, :max-fixed-arity 3, :fn-var true, :arglists (quote ([schema postcondition post-name]))}, Either {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Either, :file "resources/public/js/schema/core.cljs", :end-column 31, :type true, :column 25, :internal-ctor true, :line 442, :record true, :end-line 442, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->One {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 882, :column 25, :end-line 882, :end-column 28, :internal-ctor true, :factory :map, :arglists (quote ([G__20115]))}, :name schema.core/map->One, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 28, :method-params ([G__20115]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 882, :end-line 882, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20115]))}, fn-schema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 1177, :column 30, :end-line 1177, :end-column 39, :tag FnSchema, :arglists (quote ([f])), :doc "Produce the schema for a function defined with s/fn or s/defn."}, :name schema.core/fn-schema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 39, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1177, :ret-tag FnSchema, :end-line 1177, :max-fixed-arity 1, :tag FnSchema, :fn-var true, :arglists (quote ([f])), :doc "Produce the schema for a function defined with s/fn or s/defn."}, conditional {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 488, :column 20, :end-line 488, :end-column 31, :arglists (quote ([& preds-and-schemas])), :doc "Define a conditional schema.  Takes args like cond,\n   (conditional pred1 schema1 pred2 schema2 ...),\n   and checks the first schema where pred is true on the value.\n   Unlike cond, throws if the value does not match any condition.\n   :else may be used as a final condition in the place of (constantly true).\n   More efficient than either, since only one schema must be checked.\n   An optional final argument can be passed, a symbol to appear in\n   error messages when none of the conditions match.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(preds-and-schemas)], :arglists ([& preds-and-schemas]), :arglists-meta (nil)}}, :name schema.core/conditional, :variadic true, :file "resources/public/js/schema/core.cljs", :end-column 31, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(preds-and-schemas)], :arglists ([& preds-and-schemas]), :arglists-meta (nil)}, :method-params [(preds-and-schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 488, :end-line 488, :max-fixed-arity 0, :fn-var true, :arglists ([& preds-and-schemas]), :doc "Define a conditional schema.  Takes args like cond,\n   (conditional pred1 schema1 pred2 schema2 ...),\n   and checks the first schema where pred is true on the value.\n   Unlike cond, throws if the value does not match any condition.\n   :else may be used as a final condition in the place of (constantly true).\n   More efficient than either, since only one schema must be checked.\n   An optional final argument can be passed, a symbol to appear in\n   error messages when none of the conditions match."}, precondition {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 513, :column 4, :end-line 513, :end-column 16, :protocol schema.core/HasPrecondition, :doc "Return a predicate representing the Precondition for this schema:\n     the predicate returns true if the precondition is satisfied.\n     (See spec.core for more details)", :arglists (quote ([this]))}, :protocol schema.core/HasPrecondition, :name schema.core/precondition, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 512, :end-line 513, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return a predicate representing the Precondition for this schema:\n     the predicate returns true if the precondition is satisfied.\n     (See spec.core for more details)"}, either {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 453, :column 43, :end-line 453, :end-column 49, :deprecated "1.0.0", :arglists (quote ([& schemas])), :doc "A value that must satisfy at least one schema in schemas.\n   Note that `either` does not work properly with coercion\n\n   DEPRECATED: prefer `cond-pre`\n\n   WARNING: either does not work with coercion.  It is also slow and gives\n   bad error messages.  Please consider using `conditional` and friends\n   instead; they are more efficient, provide better error messages,\n   and work with coercion.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}}, :name schema.core/either, :variadic true, :file "resources/public/js/schema/core.cljs", :end-column 49, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}, :method-params [(schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 453, :deprecated "1.0.0", :end-line 453, :max-fixed-arity 0, :fn-var true, :arglists ([& schemas]), :doc "A value that must satisfy at least one schema in schemas.\n   Note that `either` does not work properly with coercion\n\n   DEPRECATED: prefer `cond-pre`\n\n   WARNING: either does not work with coercion.  It is also slow and gives\n   bad error messages.  Please consider using `conditional` and friends\n   instead; they are more efficient, provide better error messages,\n   and work with coercion."}, explicit-schema-key {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 721, :column 20, :end-line 721, :end-column 39, :arglists (quote ([ks]))}, :name schema.core/explicit-schema-key, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 39, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 721, :end-line 721, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}, schema-name {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 1063, :column 20, :end-line 1063, :end-column 31, :arglists (quote ([schema])), :doc "Returns the name of a schema attached via schema-with-name (or defschema)."}, :name schema.core/schema-name, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 31, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1063, :end-line 1063, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Returns the name of a schema attached via schema-with-name (or defschema)."}, Bool {:name schema.core/Bool, :file "resources/public/js/schema/core.cljs", :line 365, :column 1, :end-line 365, :end-column 10, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 365, :column 6, :end-line 365, :end-column 10}, :doc "Boolean true or false"}, ->EqSchema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 250, :column 25, :end-line 250, :end-column 33, :internal-ctor true, :factory :positional, :arglists (quote ([v]))}, :name schema.core/->EqSchema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 33, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 250, :end-line 250, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, enum {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 283, :column 20, :end-line 283, :end-column 24, :arglists (quote ([& vs])), :doc "A value that must be = to some element of vs.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(vs)], :arglists ([& vs]), :arglists-meta (nil)}}, :name schema.core/enum, :variadic true, :file "resources/public/js/schema/core.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(vs)], :arglists ([& vs]), :arglists-meta (nil)}, :method-params [(vs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 283, :end-line 283, :max-fixed-arity 0, :fn-var true, :arglists ([& vs]), :doc "A value that must be = to some element of vs."}, one {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 884, :column 20, :end-line 884, :end-column 23, :arglists (quote ([schema name])), :doc "A single required element of a sequence (not repeated, the implicit default)"}, :name schema.core/one, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 23, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 884, :end-line 884, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "A single required element of a sequence (not repeated, the implicit default)"}, find-extra-keys-schema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 753, :column 20, :end-line 753, :end-column 42, :arglists (quote ([map-schema]))}, :name schema.core/find-extra-keys-schema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 42, :method-params ([map-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 753, :end-line 753, :max-fixed-arity 1, :fn-var true, :arglists (quote ([map-schema]))}, map->Predicate {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 291, :column 25, :end-line 291, :end-column 34, :internal-ctor true, :factory :map, :arglists (quote ([G__19841]))}, :name schema.core/map->Predicate, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 34, :method-params ([G__19841]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 291, :end-line 291, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19841]))}, map->RequiredKey {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 697, :column 25, :end-line 697, :end-column 36, :internal-ctor true, :factory :map, :arglists (quote ([G__20025]))}, :name schema.core/map->RequiredKey, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 36, :method-params ([G__20025]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 697, :end-line 697, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20025]))}, Record {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Record, :file "resources/public/js/schema/core.cljs", :end-column 31, :type true, :column 25, :internal-ctor true, :line 961, :record true, :end-line 961, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, parse-sequence-schema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 894, :column 20, :end-line 894, :end-column 41, :arglists (quote ([s]))}, :name schema.core/parse-sequence-schema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 41, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 894, :end-line 894, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, ->t_schema$core19868 {:protocol-inline nil, :meta {:anonymous true, :protocols #{schema.core/Schema cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([meta19869])), :file nil}, :protocols #{schema.core/Schema cljs.core/IMeta cljs.core/IWithMeta}, :name schema.core/->t_schema$core19868, :variadic false, :file "resources/public/js/schema/core.cljs", :method-params ([meta19869]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 10, :factory :positional, :line 388, :max-fixed-arity 1, :fn-var true, :arglists (quote ([meta19869])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, OptionalKey {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/OptionalKey, :file "resources/public/js/schema/core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 710, :record true, :end-line 710, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Record {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 961, :column 25, :end-line 961, :end-column 31, :internal-ctor true, :factory :map, :arglists (quote ([G__20146]))}, :name schema.core/map->Record, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 31, :method-params ([G__20146]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 961, :end-line 961, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20146]))}, EqSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/EqSchema, :file "resources/public/js/schema/core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 250, :record true, :end-line 250, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, explain {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 113, :column 4, :end-line 113, :end-column 11, :protocol schema.core/Schema, :doc "Expand this schema to a human-readable format suitable for pprinting,\n     also expanding class schematas at the leaves.  Example:\n\n     user> (s/explain {:a s/Keyword :b [s/Int]} )\n     {:a Keyword, :b [Int]}", :arglists (quote ([this]))}, :protocol schema.core/Schema, :name schema.core/explain, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Expand this schema to a human-readable format suitable for pprinting,\n     also expanding class schematas at the leaves.  Example:\n\n     user> (s/explain {:a s/Keyword :b [s/Int]} )\n     {:a Keyword, :b [Int]}"}, map-spec {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 801, :column 8, :end-line 801, :end-column 16, :private true, :arglists (quote ([this]))}, :private true, :name schema.core/map-spec, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 801, :end-line 801, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, ->RequiredKey {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 697, :column 25, :end-line 697, :end-column 36, :internal-ctor true, :factory :positional, :arglists (quote ([k]))}, :name schema.core/->RequiredKey, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 36, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 697, :end-line 697, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, CondPre {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/CondPre, :file "resources/public/js/schema/core.cljs", :end-column 32, :type true, :column 25, :internal-ctor true, :line 537, :record true, :end-line 537, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Protocol {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 318, :column 25, :end-line 318, :end-column 33, :internal-ctor true, :factory :map, :arglists (quote ([G__19858]))}, :name schema.core/map->Protocol, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 33, :method-params ([G__19858]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 318, :end-line 318, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19858]))}, set-max-value-length! {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 1348, :column 20, :end-line 1348, :end-column 41, :arglists (quote ([max-length])), :doc "Sets the maximum length of value to be output before it is contracted to a prettier name."}, :name schema.core/set-max-value-length!, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 41, :method-params ([max-length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1348, :end-line 1348, :max-fixed-arity 1, :fn-var true, :arglists (quote ([max-length])), :doc "Sets the maximum length of value to be output before it is contracted to a prettier name."}, map->Recursive {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 628, :column 25, :end-line 628, :end-column 34, :internal-ctor true, :factory :map, :arglists (quote ([G__20005]))}, :name schema.core/map->Recursive, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 34, :method-params ([G__20005]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 628, :end-line 628, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20005]))}, Constrained {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Constrained, :file "resources/public/js/schema/core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 560, :record true, :end-line 560, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, fn-validation? {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 1140, :column 20, :end-line 1140, :end-column 34, :arglists (quote ([])), :doc "Get the current global schema validation setting."}, :name schema.core/fn-validation?, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 34, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1140, :end-line 1140, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Get the current global schema validation setting."}, isa {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 268, :column 20, :end-line 268, :end-column 23, :arglists (quote ([parent] [h parent])), :doc "A value that must be a child of parent.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([parent] [h parent]), :arglists ([parent] [h parent]), :arglists-meta (nil nil)}}, :name schema.core/isa, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([parent] [h parent]), :arglists ([parent] [h parent]), :arglists-meta (nil nil)}, :method-params ([parent] [h parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 2, :fn-var true, :arglists ([parent] [h parent]), :doc "A value that must be a child of parent."}, Num {:name schema.core/Num, :file "resources/public/js/schema/core.cljs", :line 369, :column 1, :end-line 369, :end-column 9, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 369, :column 6, :end-line 369, :end-column 9}, :doc "Any number"}, eq {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 255, :column 20, :end-line 255, :end-column 22, :arglists (quote ([v])), :doc "A value that must be (= v)."}, :name schema.core/eq, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 22, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "A value that must be (= v)."}, validate {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 155, :column 20, :end-line 155, :end-column 28, :arglists (quote ([schema value])), :doc "Throw an exception if value does not satisfy schema; otherwise, return value.\n   If you will be validating many datums, it is much more efficient to create\n   a 'validator' once and call it on each of them."}, :name schema.core/validate, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 28, :method-params ([schema value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema value])), :doc "Throw an exception if value does not satisfy schema; otherwise, return value.\n   If you will be validating many datums, it is much more efficient to create\n   a 'validator' once and call it on each of them."}, ->Atomic {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 658, :column 25, :end-line 658, :end-column 31, :internal-ctor true, :factory :positional, :arglists (quote ([schema]))}, :name schema.core/->Atomic, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 31, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 658, :end-line 658, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema]))}, pred {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 301, :column 20, :end-line 301, :end-column 24, :arglists (quote ([p?] [p? pred-name])), :doc "A value for which p? returns true (and does not throw).\n   Optional pred-name can be passed for nicer validation errors.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p?] [p? pred-name]), :arglists ([p?] [p? pred-name]), :arglists-meta (nil nil)}}, :name schema.core/pred, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p?] [p? pred-name]), :arglists ([p?] [p? pred-name]), :arglists-meta (nil nil)}, :method-params ([p?] [p? pred-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 301, :end-line 301, :max-fixed-arity 2, :fn-var true, :arglists ([p?] [p? pred-name]), :doc "A value for which p? returns true (and does not throw).\n   Optional pred-name can be passed for nicer validation errors."}, AnythingSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/AnythingSchema, :file "resources/public/js/schema/core.cljs", :end-column 39, :type true, :column 25, :internal-ctor true, :line 235, :record true, :end-line 235, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, Any {:name schema.core/Any, :file "resources/public/js/schema/core.cljs", :line 243, :column 1, :end-line 243, :end-column 9, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 243, :column 6, :end-line 243, :end-column 9}, :doc "Any value, including nil."}, ->CondPre {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 537, :column 25, :end-line 537, :end-column 32, :internal-ctor true, :factory :positional, :arglists (quote ([schemas]))}, :name schema.core/->CondPre, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 32, :method-params ([schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 537, :end-line 537, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schemas]))}, Regex {:name schema.core/Regex, :file "resources/public/js/schema/core.cljs", :line 385, :column 1, :end-line 385, :end-column 11, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 385, :column 6, :end-line 385, :end-column 11}, :doc "A regular expression"}, ->EnumSchema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 278, :column 25, :end-line 278, :end-column 35, :internal-ctor true, :factory :positional, :arglists (quote ([vs]))}, :name schema.core/->EnumSchema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 35, :method-params ([vs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 278, :end-line 278, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vs]))}, RequiredKey {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/RequiredKey, :file "resources/public/js/schema/core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 697, :record true, :end-line 697, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, cond-pre {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 550, :column 20, :end-line 550, :end-column 28, :arglists (quote ([& schemas])), :doc "A replacement for `either` that constructs a conditional schema\n   based on the schema spec preconditions of the component schemas.\n\n   EXPERIMENTAL", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}}, :name schema.core/cond-pre, :variadic true, :file "resources/public/js/schema/core.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}, :method-params [(schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 550, :end-line 550, :max-fixed-arity 0, :fn-var true, :arglists ([& schemas]), :doc "A replacement for `either` that constructs a conditional schema\n   based on the schema spec preconditions of the component schemas.\n\n   EXPERIMENTAL"}, explain-kspec {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 760, :column 21, :end-line 760, :end-column 34, :private true, :arglists (quote ([kspec]))}, :private true, :name schema.core/explain-kspec, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 34, :method-params ([kspec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 760, :end-line 760, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kspec]))}, record* {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 975, :column 20, :end-line 975, :end-column 27, :arglists (quote ([klass schema map-constructor]))}, :name schema.core/record*, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 27, :method-params ([klass schema map-constructor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 975, :end-line 975, :max-fixed-arity 3, :fn-var true, :arglists (quote ([klass schema map-constructor]))}, Inst {:name schema.core/Inst, :file "resources/public/js/schema/core.cljs", :line 394, :column 1, :end-line 394, :end-column 10, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 394, :column 6, :end-line 394, :end-column 10}, :doc "The local representation of #inst ..."}, queue {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 867, :column 20, :end-line 867, :end-column 25, :arglists (quote ([x])), :doc "Defines a schema satisfied by instances of clojure.lang.PersistentQueue\n  (clj.core/PersistentQueue in ClojureScript) whose values satisfy x."}, :name schema.core/queue, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 25, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 867, :end-line 867, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Defines a schema satisfied by instances of clojure.lang.PersistentQueue\n  (clj.core/PersistentQueue in ClojureScript) whose values satisfy x."}, validator {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 145, :column 20, :end-line 145, :end-column 29, :arglists (quote ([schema])), :doc "Compile an efficient validator for schema."}, :name schema.core/validator, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 29, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Compile an efficient validator for schema."}, map->OptionalKey {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 710, :column 25, :end-line 710, :end-column 36, :internal-ctor true, :factory :map, :arglists (quote ([G__20033]))}, :name schema.core/map->OptionalKey, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 36, :method-params ([G__20033]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 710, :end-line 710, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20033]))}, FnSchema {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/FnSchema, :file "resources/public/js/schema/core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 1011, :record true, :end-line 1011, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, if {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 614, :column 20, :end-line 614, :end-column 22, :arglists (quote ([pred if-schema else-schema])), :doc "if the predicate returns truthy, use the if-schema, otherwise use the else-schema"}, :name schema.core/if, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 22, :method-params ([pred if-schema else-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 614, :end-line 614, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pred if-schema else-schema])), :doc "if the predicate returns truthy, use the if-schema, otherwise use the else-schema"}, Predicate {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Predicate, :file "resources/public/js/schema/core.cljs", :end-column 34, :type true, :column 25, :internal-ctor true, :line 291, :record true, :end-line 291, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, make-fn-schema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 1026, :column 20, :end-line 1026, :end-column 34, :arglists (quote ([output-schema input-schemas])), :doc "A function outputting a value in output schema, whose argument vector must match one of\n   input-schemas, each of which should be a sequence schema.\n   Currently function schemas are purely descriptive; they validate against any function,\n   regardless of actual input and output types."}, :name schema.core/make-fn-schema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 34, :method-params ([output-schema input-schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1026, :end-line 1026, :max-fixed-arity 2, :fn-var true, :arglists (quote ([output-schema input-schemas])), :doc "A function outputting a value in output schema, whose argument vector must match one of\n   input-schemas, each of which should be a sequence schema.\n   Currently function schemas are purely descriptive; they validate against any function,\n   regardless of actual input and output types."}, as-queue {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 850, :column 20, :end-line 850, :end-column 28, :arglists (quote ([col]))}, :name schema.core/as-queue, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 28, :method-params ([col]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 850, :end-line 850, :max-fixed-arity 1, :fn-var true, :arglists (quote ([col]))}, Str {:name schema.core/Str, :file "resources/public/js/schema/core.cljs", :line 360, :column 1, :end-line 360, :end-column 9, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 360, :column 6, :end-line 360, :end-column 9}, :doc "Satisfied only by String.\n   Is (pred string?) and not js/String in cljs because of keywords."}, map->EqSchema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 250, :column 25, :end-line 250, :end-column 33, :internal-ctor true, :factory :map, :arglists (quote ([G__19801]))}, :name schema.core/map->EqSchema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 33, :method-params ([G__19801]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 250, :end-line 250, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19801]))}, ->AnythingSchema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 235, :column 25, :end-line 235, :end-column 39, :internal-ctor true, :factory :positional, :arglists (quote ([_]))}, :name schema.core/->AnythingSchema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 39, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 235, :end-line 235, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_]))}, maybe {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 418, :column 20, :end-line 418, :end-column 25, :arglists (quote ([schema])), :doc "A value that must either be nil or satisfy schema"}, :name schema.core/maybe, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 25, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 418, :end-line 418, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "A value that must either be nil or satisfy schema"}, check {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 136, :column 20, :end-line 136, :end-column 25, :arglists (quote ([schema x])), :doc "Return nil if x matches schema; otherwise, returns a value that looks like the\n   'bad' parts of x with ValidationErrors at the leaves describing the failures.\n\n   If you will be checking many datums, it is much more efficient to create\n   a 'checker' once and call it on each of them."}, :name schema.core/check, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 25, :method-params ([schema x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema x])), :doc "Return nil if x matches schema; otherwise, returns a value that looks like the\n   'bad' parts of x with ValidationErrors at the leaves describing the failures.\n\n   If you will be checking many datums, it is much more efficient to create\n   a 'checker' once and call it on each of them."}, pair {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 948, :column 20, :end-line 948, :end-column 24, :arglists (quote ([first-schema first-name second-schema second-name])), :doc "A schema for a pair of schemas and their names"}, :name schema.core/pair, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 24, :method-params ([first-schema first-name second-schema second-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 948, :end-line 948, :max-fixed-arity 4, :fn-var true, :arglists (quote ([first-schema first-name second-schema second-name])), :doc "A schema for a pair of schemas and their names"}, set-fn-validation! {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 1145, :column 20, :end-line 1145, :end-column 38, :arglists (quote ([on?])), :doc "Globally turn on (or off) schema validation for all s/fn and s/defn instances."}, :name schema.core/set-fn-validation!, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 38, :method-params ([on?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1145, :end-line 1145, :max-fixed-arity 1, :fn-var true, :arglists (quote ([on?])), :doc "Globally turn on (or off) schema validation for all s/fn and s/defn instances."}, EnumSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/EnumSchema, :file "resources/public/js/schema/core.cljs", :end-column 35, :type true, :column 25, :internal-ctor true, :line 278, :record true, :end-line 278, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->OptionalKey {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 710, :column 25, :end-line 710, :end-column 36, :internal-ctor true, :factory :positional, :arglists (quote ([k]))}, :name schema.core/->OptionalKey, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 36, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 710, :end-line 710, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, map->Constrained {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 560, :column 25, :end-line 560, :end-column 36, :internal-ctor true, :factory :map, :arglists (quote ([G__19973]))}, :name schema.core/map->Constrained, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 36, :method-params ([G__19973]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 560, :end-line 560, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19973]))}, ->ConditionalSchema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 469, :column 25, :end-line 469, :end-column 42, :internal-ctor true, :factory :positional, :arglists (quote ([preds-and-schemas error-symbol]))}, :name schema.core/->ConditionalSchema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 42, :method-params ([preds-and-schemas error-symbol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 469, :end-line 469, :max-fixed-arity 2, :fn-var true, :arglists (quote ([preds-and-schemas error-symbol]))}, ->NamedSchema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 426, :column 25, :end-line 426, :end-column 36, :internal-ctor true, :factory :positional, :arglists (quote ([schema name]))}, :name schema.core/->NamedSchema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 36, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 426, :end-line 426, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name]))}, schematize-fn {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 1172, :column 20, :end-line 1172, :end-column 33, :arglists (quote ([f schema])), :doc "Attach the schema to fn f at runtime, extractable by fn-schema."}, :name schema.core/schematize-fn, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 33, :method-params ([f schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1172, :end-line 1172, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f schema])), :doc "Attach the schema to fn f at runtime, extractable by fn-schema."}, Uuid {:name schema.core/Uuid, :file "resources/public/js/schema/core.cljs", :line 398, :column 1, :end-line 398, :end-column 10, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 398, :column 6, :end-line 398, :end-column 10}, :doc "The local representation of #uuid ..."}, map->Isa {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 263, :column 25, :end-line 263, :end-column 28, :internal-ctor true, :factory :map, :arglists (quote ([G__19811]))}, :name schema.core/map->Isa, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 28, :method-params ([G__19811]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 263, :end-line 263, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19811]))}, map->Either {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 442, :column 25, :end-line 442, :end-column 31, :internal-ctor true, :factory :map, :arglists (quote ([G__19891]))}, :name schema.core/map->Either, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 31, :method-params ([G__19891]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 442, :end-line 442, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19891]))}, schema-ns {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 1068, :column 20, :end-line 1068, :end-column 29, :arglists (quote ([schema])), :doc "Returns the namespace of a schema attached via defschema."}, :name schema.core/schema-ns, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 29, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1068, :end-line 1068, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Returns the namespace of a schema attached via defschema."}, ->Record {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 961, :column 25, :end-line 961, :end-column 31, :internal-ctor true, :factory :positional, :arglists (quote ([klass schema]))}, :name schema.core/->Record, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 31, :method-params ([klass schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 961, :end-line 961, :max-fixed-arity 2, :fn-var true, :arglists (quote ([klass schema]))}, ->Recursive {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 628, :column 25, :end-line 628, :end-column 34, :internal-ctor true, :factory :positional, :arglists (quote ([derefable]))}, :name schema.core/->Recursive, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 34, :method-params ([derefable]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 628, :end-line 628, :max-fixed-arity 1, :fn-var true, :arglists (quote ([derefable]))}, protocol-name {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 313, :column 20, :end-line 313, :end-column 33, :arglists (quote ([protocol]))}, :name schema.core/protocol-name, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 33, :method-params ([protocol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 313, :end-line 313, :max-fixed-arity 1, :fn-var true, :arglists (quote ([protocol]))}, constrained {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 571, :column 20, :end-line 571, :end-column 31, :arglists (quote ([s p?] [s p? pred-name])), :doc "A schema with an additional post-condition.  Differs from `conditional`\n   with a single schema, in that the predicate checked *after* the main\n   schema.  This can lead to better error messages, and is often better\n   suited for coercion.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s p?] [s p? pred-name]), :arglists ([s p?] [s p? pred-name]), :arglists-meta (nil nil)}}, :name schema.core/constrained, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 31, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s p?] [s p? pred-name]), :arglists ([s p?] [s p? pred-name]), :arglists-meta (nil nil)}, :method-params ([s p?] [s p? pred-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 571, :end-line 571, :max-fixed-arity 3, :fn-var true, :arglists ([s p?] [s p? pred-name]), :doc "A schema with an additional post-condition.  Differs from `conditional`\n   with a single schema, in that the predicate checked *after* the main\n   schema.  This can lead to better error messages, and is often better\n   suited for coercion."}, Isa {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Isa, :file "resources/public/js/schema/core.cljs", :end-column 28, :type true, :column 25, :internal-ctor true, :line 263, :record true, :end-line 263, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->CondPre {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 537, :column 25, :end-line 537, :end-column 32, :internal-ctor true, :factory :map, :arglists (quote ([G__19955]))}, :name schema.core/map->CondPre, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 32, :method-params ([G__19955]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 537, :end-line 537, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19955]))}, queue? {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 844, :column 20, :end-line 844, :end-column 26, :arglists (quote ([x]))}, :name schema.core/queue?, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 844, :end-line 844, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, ->Either {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 442, :column 25, :end-line 442, :end-column 31, :internal-ctor true, :factory :positional, :arglists (quote ([schemas]))}, :name schema.core/->Either, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 31, :method-params ([schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 442, :end-line 442, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schemas]))}, map->NamedSchema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 426, :column 25, :end-line 426, :end-column 36, :internal-ctor true, :factory :map, :arglists (quote ([G__19882]))}, :name schema.core/map->NamedSchema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 36, :method-params ([G__19882]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 426, :end-line 426, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19882]))}, HasPrecondition {:meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 512, :column 14, :end-line 512, :end-column 29, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {precondition [[this]]}}}, :protocol-symbol true, :name schema.core/HasPrecondition, :file "resources/public/js/schema/core.cljs", :end-column 29, :column 1, :line 512, :protocol-info {:methods {precondition [[this]]}}, :info nil, :end-line 512, :impls #{schema/spec.leaf.LeafSpec schema/spec.variant.VariantSpec schema.core/Both schema/spec.collection.CollectionSpec}, :doc nil, :jsdoc ("@interface")}, Queue {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Queue, :file "resources/public/js/schema/core.cljs", :end-column 30, :type true, :column 25, :internal-ctor true, :line 857, :record true, :end-line 857, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, checker {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 128, :column 20, :end-line 128, :end-column 27, :arglists (quote ([schema])), :doc "Compile an efficient checker for schema, which returns nil for valid values and\n   error descriptions otherwise."}, :name schema.core/checker, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 27, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Compile an efficient checker for schema, which returns nil for valid values and\n   error descriptions otherwise."}, Keyword {:name schema.core/Keyword, :file "resources/public/js/schema/core.cljs", :line 377, :column 1, :end-line 377, :end-column 13, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 377, :column 6, :end-line 377, :end-column 13}, :doc "A keyword"}, recursive {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 642, :column 20, :end-line 642, :end-column 29, :arglists (quote ([schema])), :doc "Support for (mutually) recursive schemas by passing a var that points to a schema,\n   e.g (recursive #'ExampleRecursiveSchema)."}, :name schema.core/recursive, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 29, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 642, :end-line 642, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Support for (mutually) recursive schemas by passing a var that points to a schema,\n   e.g (recursive #'ExampleRecursiveSchema)."}, spec {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 110, :column 4, :end-line 110, :end-column 8, :protocol schema.core/Schema, :doc "A spec is a record of some type that expresses the structure of this schema\n     in a declarative and/or imperative way.  See schema.spec.* for examples.", :arglists (quote ([this]))}, :protocol schema.core/Schema, :name schema.core/spec, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 8, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "A spec is a record of some type that expresses the structure of this schema\n     in a declarative and/or imperative way.  See schema.spec.* for examples."}, t_schema$core19868 {:num-fields 1, :protocols #{schema.core/Schema cljs.core/IMeta cljs.core/IWithMeta}, :name schema.core/t_schema$core19868, :file "resources/public/js/schema/core.cljs", :type true, :anonymous true, :column 10, :line 388, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, Recursive {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Recursive, :file "resources/public/js/schema/core.cljs", :end-column 34, :type true, :column 25, :internal-ctor true, :line 628, :record true, :end-line 628, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->MapEntry {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 732, :column 25, :end-line 732, :end-column 33, :internal-ctor true, :factory :positional, :arglists (quote ([key-schema val-schema]))}, :name schema.core/->MapEntry, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 33, :method-params ([key-schema val-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 732, :end-line 732, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key-schema val-schema]))}, ->Queue {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 857, :column 25, :end-line 857, :end-column 30, :internal-ctor true, :factory :positional, :arglists (quote ([schema]))}, :name schema.core/->Queue, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 30, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 857, :end-line 857, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema]))}, ->Protocol {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 318, :column 25, :end-line 318, :end-column 33, :internal-ctor true, :factory :positional, :arglists (quote ([p]))}, :name schema.core/->Protocol, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 33, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 318, :end-line 318, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, ->Maybe {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 409, :column 25, :end-line 409, :end-column 30, :internal-ctor true, :factory :positional, :arglists (quote ([schema]))}, :name schema.core/->Maybe, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 30, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 409, :end-line 409, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema]))}, explain-input-schema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 1005, :column 20, :end-line 1005, :end-column 40, :arglists (quote ([input-schema]))}, :name schema.core/explain-input-schema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 40, :method-params ([input-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1005, :end-line 1005, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input-schema]))}, map-elements {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 769, :column 8, :end-line 769, :end-column 20, :private true, :arglists (quote ([this]))}, :private true, :name schema.core/map-elements, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 769, :end-line 769, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, optional-key? {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 717, :column 20, :end-line 717, :end-column 33, :arglists (quote ([ks]))}, :name schema.core/optional-key?, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 33, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 717, :end-line 717, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}, Atomic {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Atomic, :file "resources/public/js/schema/core.cljs", :end-column 31, :type true, :column 25, :internal-ctor true, :line 658, :record true, :end-line 658, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Both {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 584, :column 25, :end-line 584, :end-column 29, :internal-ctor true, :factory :map, :arglists (quote ([G__19989]))}, :name schema.core/map->Both, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 29, :method-params ([G__19989]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 584, :end-line 584, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19989]))}, required-key {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 699, :column 20, :end-line 699, :end-column 32, :arglists (quote ([k])), :doc "A required key in a map"}, :name schema.core/required-key, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 32, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 699, :end-line 699, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "A required key in a map"}, optional {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 889, :column 20, :end-line 889, :end-column 28, :arglists (quote ([schema name])), :doc "A single optional element of a sequence (not repeated, the implicit default)"}, :name schema.core/optional, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 28, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 889, :end-line 889, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "A single optional element of a sequence (not repeated, the implicit default)"}, Int {:name schema.core/Int, :file "resources/public/js/schema/core.cljs", :line 373, :column 1, :end-line 373, :end-column 9, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 373, :column 6, :end-line 373, :end-column 9}, :doc "Any integral number"}, ->FnSchema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 1011, :column 25, :end-line 1011, :end-column 33, :internal-ctor true, :factory :positional, :arglists (quote ([output-schema input-schemas]))}, :name schema.core/->FnSchema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 33, :method-params ([output-schema input-schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 1011, :end-line 1011, :max-fixed-arity 2, :fn-var true, :arglists (quote ([output-schema input-schemas]))}, Schema {:meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 109, :column 14, :end-line 109, :end-column 20, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {spec [[this]], explain [[this]]}}}, :protocol-symbol true, :name schema.core/Schema, :file "resources/public/js/schema/core.cljs", :end-column 20, :column 1, :line 109, :protocol-info {:methods {spec [[this]], explain [[this]]}}, :info nil, :end-line 109, :impls #{schema.core/Isa cljs/core.PersistentHashMap js/RegExp schema.core/Queue schema.core/t_schema$core19868 schema.core/Recursive schema.core/Atomic cljs/core.PersistentArrayMap schema.core/NamedSchema cljs/core.PersistentVector schema.core/Either schema.core/Both cljs/core.PersistentHashSet schema.core/ConditionalSchema schema.core/Record schema.core/EqSchema schema.core/MapEntry function schema.core/Maybe schema.core/AnythingSchema schema.core/FnSchema schema.core/Predicate schema.core/EnumSchema schema.core/Protocol schema.core/CondPre schema.core/Constrained}, :doc nil, :jsdoc ("@interface")}, Both {:num-fields 1, :protocols #{cljs.core/IRecord schema.core/HasPrecondition cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted schema.spec.core/CoreSpec cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Both, :file "resources/public/js/schema/core.cljs", :end-column 29, :type true, :column 25, :internal-ctor true, :line 584, :record true, :end-line 584, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Maybe {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 409, :column 25, :end-line 409, :end-column 30, :internal-ctor true, :factory :map, :arglists (quote ([G__19873]))}, :name schema.core/map->Maybe, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 30, :method-params ([G__19873]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 409, :end-line 409, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19873]))}, map-entry {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 750, :column 20, :end-line 750, :end-column 29, :arglists (quote ([key-schema val-schema]))}, :name schema.core/map-entry, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 29, :method-params ([key-schema val-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 750, :end-line 750, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key-schema val-schema]))}, specific-key? {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 727, :column 20, :end-line 727, :end-column 33, :arglists (quote ([ks]))}, :name schema.core/specific-key?, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 33, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 727, :end-line 727, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}, var-name {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 624, :column 20, :end-line 624, :end-column 28, :arglists (quote ([v]))}, :name schema.core/var-name, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 28, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 624, :end-line 624, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, map->EnumSchema {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 278, :column 25, :end-line 278, :end-column 35, :internal-ctor true, :factory :map, :arglists (quote ([G__19828]))}, :name schema.core/map->EnumSchema, :variadic false, :file "resources/public/js/schema/core.cljs", :end-column 35, :method-params ([G__19828]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 278, :end-line 278, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19828]))}, both {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/core.cljs", :line 603, :column 43, :end-line 603, :end-column 47, :deprecated "1.0.0", :arglists (quote ([& schemas])), :doc "A value that must satisfy every schema in schemas.\n\n   DEPRECATED: prefer 'conditional' with a single condition\n   instead, or `constrained`.\n\n   When used with coercion, coerces each schema in sequence.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}}, :name schema.core/both, :variadic true, :file "resources/public/js/schema/core.cljs", :end-column 47, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}, :method-params [(schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 603, :deprecated "1.0.0", :end-line 603, :max-fixed-arity 0, :fn-var true, :arglists ([& schemas]), :doc "A value that must satisfy every schema in schemas.\n\n   DEPRECATED: prefer 'conditional' with a single condition\n   instead, or `constrained`.\n\n   When used with coercion, coerces each schema in sequence."}}, :require-macros {macros schema.macros, schema.macros schema.macros, schema.core schema.core, utils schema.utils, schema.utils schema.utils, spec schema.spec.core, schema.spec.core schema.spec.core}, :cljs.analyzer/constants {:seen #{matches-some-precondition? & meta19869 named postcondition :schema optional-key present? satisfies? p? atom js/RegExp = :klass :v :schema.core/error p isa? atom? Symbol vs :post-name :parent conditional :else missing-required-key either Bool enum sequential? one :_ set? :ns schema :name :wrap-error :extra-validator-fn :output-schema some-matching-either-clause? :value klass :key-schema v map? :proto-sym some-matching-condition? has-extra-elts? :input-schemas string? post-name :type Num eq parent :derefable pred Any Regex protocol :val-schema cond-pre :schema.core/missing :preds-and-schemas Inst queue _ Str :k maybe name output-schema :optional? key-schema passes-extra-validation? input-schemas Uuid derefable :schemas instance? re-find :h val-schema preds-and-schemas constrained :error-symbol queue? :constructor :pred-name k => Keyword recursive ifn? :error optional? var :postcondition schemas error-symbol =>* h :p? ... invalid-key record pred-name required-key optional :proto-pred Int :p :guard :vs map-entry both disallowed-key}, :order [:type :schema :value :error :schema.core/error instance? Str Bool Num Regex Inst Uuid :_ Any _ :v = eq v :h :parent isa? h parent :vs enum vs :p? :pred-name Int Keyword Symbol :else pred p? pred-name :proto-sym :p :proto-pred satisfies? protocol p string? re-find js/RegExp meta19869 :guard maybe schema :name :wrap-error named name :schemas some-matching-either-clause? either schemas :preds-and-schemas :error-symbol some-matching-condition? conditional preds-and-schemas error-symbol matches-some-precondition? cond-pre :postcondition :post-name constrained postcondition post-name both :ns :derefable var ... recursive derefable atom? atom :k k :key-schema :val-schema invalid-key map-entry key-schema val-schema required-key optional-key missing-required-key disallowed-key map? set? queue? queue :optional? optional? sequential? :schema.core/missing present? has-extra-elts? optional one :klass :extra-validator-fn passes-extra-validation? :constructor record klass & :output-schema :input-schemas ifn? =>* => output-schema input-schemas]}, :doc "A library for data shape definition and validation. A Schema is just Clojure data,\n   which can be used to document and validate Clojure functions and data.\n\n   For example,\n\n   (def FooBar {:foo Keyword :bar [Number]}) ;; a schema\n\n   (check FooBar {:foo :k :bar [1.0 2.0 3.0]})\n   ==> nil\n\n   representing successful validation, but the following all return helpful errors\n   describing how the provided data fails to measure up to schema FooBar's standards.\n\n   (check FooBar {:bar [1.0 2.0 3.0]})\n   ==> {:foo missing-required-key}\n\n   (check FooBar {:foo 1 :bar [1.0 2.0 3.0]})\n   ==> {:foo (not (keyword? 1))}\n\n   (check FooBar {:foo :k :bar [1.0 2.0 3.0] :baz 1})\n   ==> {:baz disallowed-key}\n\n   Schema lets you describe your leaf values using the Any, Keyword, Symbol, Number,\n   String, and Int definitions below, or (in Clojure) you can use arbitrary Java\n   classes or primitive casts to describe simple values.\n\n   From there, you can build up schemas for complex types using Clojure syntax\n   (map literals for maps, set literals for sets, vector literals for sequences,\n   with details described below), plus helpers below that provide optional values,\n   enumerations, arbitrary predicates, and more.\n\n   Assuming you (:require [schema.core :as s :include-macros true]),\n   Schema also provides macros for defining records with schematized elements\n   (s/defrecord), and named or anonymous functions (s/fn and s/defn) with\n   schematized inputs and return values.  In addition to producing better-documented\n   records and functions, these macros allow you to retrieve the schema associated\n   with the defined record or function.  Moreover, functions include optional\n   *validation*, which will throw an error if the inputs or outputs do not\n   match the provided schemas:\n\n   (s/defrecord FooBar\n    [foo :- Int\n     bar :- String])\n\n   (s/defn quux :- Int\n    [foobar :- Foobar\n     mogrifier :- Number]\n    (* mogrifier (+ (:foo foobar) (Long/parseLong (:bar foobar)))))\n\n   (quux (FooBar. 10 \"5\") 2)\n   ==> 30\n\n   (fn-schema quux)\n   ==> (=> Int (record user.FooBar {:foo Int, :bar java.lang.String}) java.lang.Number)\n\n   (s/with-fn-validation (quux (FooBar. 10.2 \"5\") 2))\n   ==> Input to quux does not match schema: [(named {:foo (not (integer? 10.2))} foobar) nil]\n\n   As you can see, the preferred syntax for providing type hints to schema's defrecord,\n   fn, and defn macros is to follow each element, argument, or function name with a\n   :- schema.  Symbols without schemas default to a schema of Any.  In Clojure,\n   class (e.g., clojure.lang.String) and primitive schemas (long, double) are also\n   propagated to tag metadata to ensure you get the type hinting and primitive\n   behavior you ask for.\n\n   If you don't like this style, standard Clojure-style typehints are also supported:\n\n   (fn-schema (s/fn [^String x]))\n   ==> (=> Any java.lang.String)\n\n   You can directly type hint a symbol as a class, primitive, or simple\n   schema.\n\n   See the docstrings of defrecord, fn, and defn for more details about how\n   to use these macros."}