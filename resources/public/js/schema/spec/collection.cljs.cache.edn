;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name schema.spec.collection, :imports nil, :requires {utils schema.utils, schema.utils schema.utils, spec schema.spec.core, schema.spec.core schema.spec.core}, :uses nil, :defs {element-transformer {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/spec/collection.cljs", :line 12, :column 8, :end-line 12, :end-column 27, :private true, :arglists (quote ([e params then]))}, :private true, :name schema.spec.collection/element-transformer, :variadic false, :file "resources/public/js/schema/spec/collection.cljs", :end-column 27, :method-params ([e params then]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([e params then]))}, has-error? {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/spec/collection.cljs", :line 31, :column 8, :end-line 31, :end-column 18, :private true, :arglists (quote ([l]))}, :private true, :name schema.spec.collection/has-error?, :variadic false, :file "resources/public/js/schema/spec/collection.cljs", :end-column 18, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l]))}, CollectionSpec {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted schema.spec.core/CoreSpec cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.spec.collection/CollectionSpec, :file "resources/public/js/schema/spec/collection.cljs", :end-column 26, :type true, :column 12, :internal-ctor true, :line 34, :record true, :end-line 34, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->CollectionSpec {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/spec/collection.cljs", :line 34, :column 12, :end-line 34, :end-column 26, :internal-ctor true, :factory :positional, :arglists (quote ([pre constructor elements on-error]))}, :name schema.spec.collection/->CollectionSpec, :variadic false, :file "resources/public/js/schema/spec/collection.cljs", :end-column 26, :method-params ([pre constructor elements on-error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 34, :end-line 34, :max-fixed-arity 4, :fn-var true, :arglists (quote ([pre constructor elements on-error]))}, map->CollectionSpec {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/spec/collection.cljs", :line 34, :column 12, :end-line 34, :end-column 26, :internal-ctor true, :factory :map, :arglists (quote ([G__18296]))}, :name schema.spec.collection/map->CollectionSpec, :variadic false, :file "resources/public/js/schema/spec/collection.cljs", :end-column 26, :method-params ([G__18296]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__18296]))}, collection-spec {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/spec/collection.cljs", :line 53, :column 7, :end-line 53, :end-column 22, :arglists (quote ([pre constructor elements on-error])), :doc "A collection represents a collection of elements, each of which is itself\n   schematized.  At the top level, the collection has a precondition\n   (presumably on the overall type), a constructor for the collection from a\n   sequence of items, an element spec, and a function that constructs a\n   descriptive error on failure.\n\n   The element spec is a sequence of maps, each of which provides an element\n   schema, cardinality, parser (allowing for efficient processing of\n   structured collections), and optional error wrapper."}, :name schema.spec.collection/collection-spec, :variadic false, :file "resources/public/js/schema/spec/collection.cljs", :end-column 22, :method-params ([pre constructor elements on-error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 4, :fn-var true, :arglists (quote ([pre constructor elements on-error])), :doc "A collection represents a collection of elements, each of which is itself\n   schematized.  At the top level, the collection has a precondition\n   (presumably on the overall type), a constructor for the collection from a\n   sequence of items, an element spec, and a function that constructs a\n   descriptive error on failure.\n\n   The element spec is a sequence of maps, each of which provides an element\n   schema, cardinality, parser (allowing for efficient processing of\n   structured collections), and optional error wrapper."}, all-elements {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/spec/collection.cljs", :line 77, :column 7, :end-line 77, :end-column 19, :arglists (quote ([schema]))}, :name schema.spec.collection/all-elements, :variadic false, :file "resources/public/js/schema/spec/collection.cljs", :end-column 19, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema]))}, one-element {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/spec/collection.cljs", :line 82, :column 7, :end-line 82, :end-column 18, :arglists (quote ([required? schema parser]))}, :name schema.spec.collection/one-element, :variadic false, :file "resources/public/js/schema/spec/collection.cljs", :end-column 18, :method-params ([required? schema parser]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 3, :fn-var true, :arglists (quote ([required? schema parser]))}}, :require-macros {utils schema.utils, schema.utils schema.utils}, :cljs.analyzer/constants {:seen #{:schema on-error :return-walked? :at-most-one :pre pre :elements :parser :zero-or-more :constructor elements :on-error :cardinality constructor :exactly-one}, :order [:parser :schema :return-walked? :pre :constructor :elements :on-error pre constructor elements on-error :cardinality :zero-or-more :exactly-one :at-most-one]}, :doc "A collection spec represents a collection of elements,\n   each of which is itself schematized."}