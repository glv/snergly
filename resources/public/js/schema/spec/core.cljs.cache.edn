;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name schema.spec.core, :imports nil, :requires {utils schema.utils, schema.utils schema.utils}, :uses nil, :defs {CoreSpec {:meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/spec/core.cljs", :line 12, :column 14, :end-line 12, :end-column 22, :doc "Specs are a common language for Schemas to express their structure.\n   These two use-cases aren't priveledged, just the two that are considered core\n   to being a Spec.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {subschemas [[this]], checker [[this params]]}}}, :protocol-symbol true, :name schema.spec.core/CoreSpec, :file "resources/public/js/schema/spec/core.cljs", :end-column 22, :column 1, :line 12, :protocol-info {:methods {subschemas [[this]], checker [[this params]]}}, :info nil, :end-line 12, :impls #{}, :doc "Specs are a common language for Schemas to express their structure.\n   These two use-cases aren't priveledged, just the two that are considered core\n   to being a Spec.", :jsdoc ("@interface")}, subschemas {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/spec/core.cljs", :line 16, :column 4, :end-line 16, :end-column 14, :protocol schema.spec.core/CoreSpec, :doc "List all subschemas", :arglists (quote ([this]))}, :protocol schema.spec.core/CoreSpec, :name schema.spec.core/subschemas, :variadic false, :file "resources/public/js/schema/spec/core.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "List all subschemas"}, checker {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/spec/core.cljs", :line 18, :column 4, :end-line 18, :end-column 11, :protocol schema.spec.core/CoreSpec, :doc "Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas.", :arglists (quote ([this params]))}, :protocol schema.spec.core/CoreSpec, :name schema.spec.core/checker, :variadic false, :file "resources/public/js/schema/spec/core.cljs", :end-column 11, :method-params ([this params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this params])), :doc "Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas."}, +no-precondition+ {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/spec/core.cljs", :line 43, :column 6, :end-line 43, :end-column 23}, :name schema.spec.core/+no-precondition+, :variadic false, :file "resources/public/js/schema/spec/core.cljs", :end-column 23, :method-params ([_]), :protocol-impl nil, :arglists-meta (), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists nil}, precondition {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/spec/core.cljs", :line 45, :column 7, :end-line 45, :end-column 19, :arglists (quote ([s p err-f])), :doc "Helper for making preconditions.\n   Takes a schema, predicate p, and error function err-f.\n   If the datum passes the predicate, returns nil.\n   Otherwise, returns a validation error with description (err-f datum-description),\n   where datum-description is a (short) printable standin for the datum."}, :name schema.spec.core/precondition, :variadic false, :file "resources/public/js/schema/spec/core.cljs", :end-column 19, :method-params ([s p err-f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s p err-f])), :doc "Helper for making preconditions.\n   Takes a schema, predicate p, and error function err-f.\n   If the datum passes the predicate, returns nil.\n   Otherwise, returns a validation error with description (err-f datum-description),\n   where datum-description is a (short) printable standin for the datum."}, run-checker {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/spec/core.cljs", :line 65, :column 7, :end-line 65, :end-column 18, :arglists (quote ([f return-walked? s])), :doc "A helper to start a checking run, by setting the appropriate params.\n   For examples, see schema.core/checker or schema.coerce/coercer."}, :name schema.spec.core/run-checker, :variadic false, :file "resources/public/js/schema/spec/core.cljs", :end-column 18, :method-params ([f return-walked? s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f return-walked? s])), :doc "A helper to start a checking run, by setting the appropriate params.\n   For examples, see schema.core/checker or schema.coerce/coercer."}, with-cache {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/spec/core.cljs", :line 75, :column 7, :end-line 75, :end-column 17, :arglists (quote ([cache cache-key wrap-recursive-delay result-fn]))}, :name schema.spec.core/with-cache, :variadic false, :file "resources/public/js/schema/spec/core.cljs", :end-column 17, :method-params ([cache cache-key wrap-recursive-delay result-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cache cache-key wrap-recursive-delay result-fn]))}, sub-checker {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/resources/public/js/schema/spec/core.cljs", :line 85, :column 7, :end-line 85, :end-column 18, :arglists (quote ([{:keys [schema error-wrap]} {:keys [subschema-checker cache], :as params}])), :doc "Should be called recursively on each subschema in the 'checker' method of a spec.\n   Handles caching and error wrapping behavior."}, :name schema.spec.core/sub-checker, :variadic false, :file "resources/public/js/schema/spec/core.cljs", :end-column 18, :method-params ([p__18282 p__18283]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [schema error-wrap]} {:keys [subschema-checker cache], :as params}])), :doc "Should be called recursively on each subschema in the 'checker' method of a spec.\n   Handles caching and error wrapping behavior."}}, :require-macros {macros schema.macros, schema.macros schema.macros, utils schema.utils, schema.utils schema.utils}, :cljs.analyzer/constants {:seen #{:schema :schema.spec.core/in-progress :return-walked? throws? :else :subschema-checker :cache not :error-wrap}, :order [throws? :else not :subschema-checker :return-walked? :cache :schema.spec.core/in-progress :schema :error-wrap]}, :doc "Protocol and preliminaries for Schema 'specs', which are a common language\n   for schemas to use to express their structure."}