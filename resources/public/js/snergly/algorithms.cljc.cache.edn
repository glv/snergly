;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name snergly.algorithms, :imports nil, :requires {s schema.core, schema.core schema.core, g snergly.grid, snergly.grid snergly.grid, util snergly.util, snergly.util snergly.util}, :uses nil, :defs {algorithm-functions {:name snergly.algorithms/algorithm-functions, :file "src/snergly/algorithms.cljc", :line 204, :column 1, :end-line 204, :end-column 25, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 204, :column 6, :end-line 204, :end-column 25}}, hunt-and-kill-start-new-walk {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 134, :column 7, :end-line 134, :end-column 35, :arglists (quote ([grid]))}, :name snergly.algorithms/hunt-and-kill-start-new-walk, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 35, :method-params ([grid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid]))}, maze-sidewinder {:schema (schema.core/make-fn-schema output-schema19585 [input-schema19586]), :protocol-inline nil, :meta {:arglists (quote ([grid])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 71, :column 9, :end-line 71, :end-column 24, :schema (schema.core/make-fn-schema output-schema19585 [input-schema19586]), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid", :raw-arglists (quote ([grid :- g/Grid]))}, :name snergly.algorithms/maze-sidewinder, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 24, :method-params ([G__19589]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid])), :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid])), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid"}, wilsons-loop-erased-walk {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 97, :column 7, :end-line 97, :end-column 31, :arglists (quote ([grid start-coord unvisited]))}, :name snergly.algorithms/wilsons-loop-erased-walk, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 31, :method-params ([grid start-coord unvisited]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid start-coord unvisited]))}, maze-recursive-backtrack {:schema (schema.core/make-fn-schema output-schema19704 [input-schema19705]), :protocol-inline nil, :meta {:arglists (quote ([grid])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 162, :column 9, :end-line 162, :end-column 33, :schema (schema.core/make-fn-schema output-schema19704 [input-schema19705]), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid", :raw-arglists (quote ([grid :- g/Grid]))}, :name snergly.algorithms/maze-recursive-backtrack, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 33, :method-params ([G__19708]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid])), :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid])), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid"}, cljs-index-of {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 16, :column 7, :end-line 16, :end-column 20, :arglists (quote ([s val]))}, :name snergly.algorithms/cljs-index-of, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 20, :method-params ([s val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s val]))}, binary-tree-step {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 38, :column 7, :end-line 38, :end-column 23, :arglists (quote ([grid coord]))}, :name snergly.algorithms/binary-tree-step, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 23, :method-params ([grid coord]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([grid coord]))}, find-distances {:schema (schema.core/make-fn-schema output-schema19722 [input-schema19723]), :protocol-inline nil, :meta {:arglists (quote ([grid start])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 165, :column 9, :end-line 165, :end-column 23, :schema (schema.core/make-fn-schema output-schema19722 [input-schema19723]), :doc "Inputs: [grid :- g/Grid start :- g/CellPosition]\n  Returns: g/Distances", :raw-arglists (quote ([grid :- g/Grid start :- g/CellPosition]))}, :name snergly.algorithms/find-distances, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 23, :method-params ([G__19726 G__19727]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid start :- g/CellPosition])), :line 165, :end-line 165, :max-fixed-arity 2, :fn-var true, :arglists (quote ([grid start])), :doc "Inputs: [grid :- g/Grid start :- g/CellPosition]\n  Returns: g/Distances"}, hunt-and-kill-step {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 144, :column 7, :end-line 144, :end-column 25, :arglists (quote ([grid current-coord]))}, :name snergly.algorithms/hunt-and-kill-step, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 25, :method-params ([grid current-coord]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 2, :fn-var true, :arglists (quote ([grid current-coord]))}, maze-hunt-and-kill {:schema (schema.core/make-fn-schema output-schema19684 [input-schema19685]), :protocol-inline nil, :meta {:arglists (quote ([grid])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 154, :column 9, :end-line 154, :end-column 27, :schema (schema.core/make-fn-schema output-schema19684 [input-schema19685]), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid", :raw-arglists (quote ([grid :- g/Grid]))}, :name snergly.algorithms/maze-hunt-and-kill, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 27, :method-params ([G__19688]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid])), :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid])), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid"}, sidewinder-step {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 63, :column 7, :end-line 63, :end-column 22, :arglists (quote ([grid coord run]))}, :name snergly.algorithms/sidewinder-step, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 22, :method-params ([grid coord run]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid coord run]))}, maze-aldous-broder {:schema (schema.core/make-fn-schema output-schema19614 [input-schema19615]), :protocol-inline nil, :meta {:arglists (quote ([grid])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 82, :column 9, :end-line 82, :end-column 27, :schema (schema.core/make-fn-schema output-schema19614 [input-schema19615]), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid", :raw-arglists (quote ([grid :- g/Grid]))}, :name snergly.algorithms/maze-aldous-broder, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 27, :method-params ([G__19618]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid])), :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid])), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid"}, wilsons-carve-passage {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 110, :column 7, :end-line 110, :end-column 28, :arglists (quote ([grid path unvisited]))}, :name snergly.algorithms/wilsons-carve-passage, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 28, :method-params ([grid path unvisited]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid path unvisited]))}, maze-binary-tree {:schema (schema.core/make-fn-schema output-schema19569 [input-schema19570]), :protocol-inline nil, :meta {:arglists (quote ([grid])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 45, :column 9, :end-line 45, :end-column 25, :schema (schema.core/make-fn-schema output-schema19569 [input-schema19570]), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid", :raw-arglists (quote ([grid :- g/Grid]))}, :name snergly.algorithms/maze-binary-tree, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 25, :method-params ([G__19573]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid])), :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid])), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid"}, algorithms {:name snergly.algorithms/algorithms, :file "src/snergly/algorithms.cljc", :line 8, :column 1, :end-line 8, :end-column 16, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 8, :column 6, :end-line 8, :end-column 16}}, sidewinder-end-run {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 56, :column 7, :end-line 56, :end-column 25, :arglists (quote ([grid run]))}, :name snergly.algorithms/sidewinder-end-run, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 25, :method-params ([grid run]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([grid run]))}, maze-wilsons {:schema (schema.core/make-fn-schema output-schema19652 [input-schema19653]), :protocol-inline nil, :meta {:arglists (quote ([grid])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 122, :column 9, :end-line 122, :end-column 21, :schema (schema.core/make-fn-schema output-schema19652 [input-schema19653]), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid", :raw-arglists (quote ([grid :- g/Grid]))}, :name snergly.algorithms/maze-wilsons, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 21, :method-params ([G__19656]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid])), :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid])), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid"}, find-path {:schema (schema.core/make-fn-schema output-schema19743 [input-schema19744]), :protocol-inline nil, :meta {:arglists (quote ([grid goal distances])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 185, :column 9, :end-line 185, :end-column 18, :schema (schema.core/make-fn-schema output-schema19743 [input-schema19744]), :doc "Inputs: [grid :- g/Grid goal :- g/CellPosition distances :- g/Distances]\n  Returns: g/Distances", :raw-arglists (quote ([grid :- g/Grid goal :- g/CellPosition distances :- g/Distances]))}, :name snergly.algorithms/find-path, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 18, :method-params ([G__19747 G__19748 G__19749]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid goal :- g/CellPosition distances :- g/Distances])), :line 185, :end-line 185, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid goal distances])), :doc "Inputs: [grid :- g/Grid goal :- g/CellPosition distances :- g/Distances]\n  Returns: g/Distances"}, algorithm-fn {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 211, :column 7, :end-line 211, :end-column 19, :arglists (quote ([name options]))}, :name snergly.algorithms/algorithm-fn, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 19, :method-params ([name options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name options]))}, sidewinder-end-run? {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 49, :column 7, :end-line 49, :end-column 26, :arglists (quote ([cell]))}, :name snergly.algorithms/sidewinder-end-run?, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 26, :method-params ([cell]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cell]))}}, :require-macros {s schema.core, schema.core schema.core}, :cljs.analyzer/constants {:seen #{:schema :algorithm-name :schema.core/error :color :else maze-sidewinder g/Grid maze-recursive-backtrack :max-coord :value find-distances :type maze-hunt-and-kill :east grid g/Distances goal start :longest :distances :max g/CellPosition :label maze-aldous-broder :error :origin maze-binary-tree maze-wilsons :path-to distances find-path :north :links}, :order [:else :north :east grid :schema g/Grid maze-binary-tree :type :value :error :schema.core/error :algorithm-name maze-sidewinder maze-aldous-broder :links maze-wilsons maze-hunt-and-kill maze-recursive-backtrack start g/CellPosition find-distances g/Distances :origin :max :max-coord goal distances find-path :distances :path-to :longest :label :color]}, :doc nil}