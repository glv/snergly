;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name snergly.algorithms, :imports nil, :requires {async cljs.core.async, cljs.core.async cljs.core.async, s schema.core, schema.core schema.core, g snergly.grid, snergly.grid snergly.grid, util snergly.util, snergly.util snergly.util}, :uses nil, :defs {algorithm-functions {:name snergly.algorithms/algorithm-functions, :file "src/snergly/algorithms.cljc", :line 278, :column 1, :end-line 278, :end-column 25, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 278, :column 6, :end-line 278, :end-column 25}}, hunt-and-kill-start-new-walk {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 197, :column 7, :end-line 197, :end-column 35, :arglists (quote ([grid]))}, :name snergly.algorithms/hunt-and-kill-start-new-walk, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 35, :method-params ([grid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 197, :end-line 197, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid]))}, maze-sidewinder {:schema (schema.core/make-fn-schema output-schema27276 [input-schema27277]), :protocol-inline nil, :meta {:arglists (quote ([grid result-chan report-partial-steps?])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 94, :column 9, :end-line 94, :end-column 24, :schema (schema.core/make-fn-schema output-schema27276 [input-schema27277]), :doc "Inputs: [grid :- g/Grid result-chan report-partial-steps?]", :raw-arglists (quote ([grid :- g/Grid result-chan report-partial-steps?]))}, :name snergly.algorithms/maze-sidewinder, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 24, :method-params ([G__27280 G__27281 G__27282]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid result-chan report-partial-steps?])), :line 94, :end-line 94, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid result-chan report-partial-steps?])), :doc "Inputs: [grid :- g/Grid result-chan report-partial-steps?]"}, wilsons-loop-erased-walk {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 141, :column 7, :end-line 141, :end-column 31, :arglists (quote ([grid start-coord unvisited]))}, :name snergly.algorithms/wilsons-loop-erased-walk, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 31, :method-params ([grid start-coord unvisited]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid start-coord unvisited]))}, maze-recursive-backtrack {:schema (schema.core/make-fn-schema output-schema28119 [input-schema28120]), :protocol-inline nil, :meta {:arglists (quote ([grid result-chan report-partial-steps?])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 236, :column 9, :end-line 236, :end-column 33, :schema (schema.core/make-fn-schema output-schema28119 [input-schema28120]), :doc "Inputs: [grid :- g/Grid result-chan report-partial-steps?]\n  Returns: g/Grid", :raw-arglists (quote ([grid :- g/Grid result-chan report-partial-steps?]))}, :name snergly.algorithms/maze-recursive-backtrack, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 33, :method-params ([G__28123 G__28124 G__28125]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid result-chan report-partial-steps?])), :line 236, :end-line 236, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid result-chan report-partial-steps?])), :doc "Inputs: [grid :- g/Grid result-chan report-partial-steps?]\n  Returns: g/Grid"}, maze-wilsons-sync {:schema (schema.core/make-fn-schema output-schema27775 [input-schema27776]), :protocol-inline nil, :meta {:arglists (quote ([grid])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 169, :column 9, :end-line 169, :end-column 26, :schema (schema.core/make-fn-schema output-schema27775 [input-schema27776]), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid", :raw-arglists (quote ([grid :- g/Grid]))}, :name snergly.algorithms/maze-wilsons-sync, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 26, :method-params ([G__27779]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid])), :line 169, :end-line 169, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid])), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid"}, maze-hunt-and-kill-sync {:schema (schema.core/make-fn-schema output-schema27921 [input-schema27922]), :protocol-inline nil, :meta {:arglists (quote ([grid])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 217, :column 9, :end-line 217, :end-column 32, :schema (schema.core/make-fn-schema output-schema27921 [input-schema27922]), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid", :raw-arglists (quote ([grid :- g/Grid]))}, :name snergly.algorithms/maze-hunt-and-kill-sync, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 32, :method-params ([G__27925]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid])), :line 217, :end-line 217, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid])), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid"}, cljs-index-of {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 19, :column 7, :end-line 19, :end-column 20, :arglists (quote ([s val]))}, :name snergly.algorithms/cljs-index-of, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 20, :method-params ([s val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s val]))}, binary-tree-step {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 41, :column 7, :end-line 41, :end-column 23, :arglists (quote ([grid coord]))}, :name snergly.algorithms/binary-tree-step, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 23, :method-params ([grid coord]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([grid coord]))}, find-distances {:schema (schema.core/make-fn-schema output-schema28139 [input-schema28140]), :protocol-inline nil, :meta {:arglists (quote ([grid start])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 239, :column 9, :end-line 239, :end-column 23, :schema (schema.core/make-fn-schema output-schema28139 [input-schema28140]), :doc "Inputs: [grid :- g/Grid start :- g/CellPosition]\n  Returns: g/Distances", :raw-arglists (quote ([grid :- g/Grid start :- g/CellPosition]))}, :name snergly.algorithms/find-distances, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 23, :method-params ([G__28143 G__28144]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid start :- g/CellPosition])), :line 239, :end-line 239, :max-fixed-arity 2, :fn-var true, :arglists (quote ([grid start])), :doc "Inputs: [grid :- g/Grid start :- g/CellPosition]\n  Returns: g/Distances"}, hunt-and-kill-step {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 207, :column 7, :end-line 207, :end-column 25, :arglists (quote ([grid current-coord]))}, :name snergly.algorithms/hunt-and-kill-step, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 25, :method-params ([grid current-coord]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 2, :fn-var true, :arglists (quote ([grid current-coord]))}, maze-hunt-and-kill {:schema (schema.core/make-fn-schema output-schema27941 [input-schema27942]), :protocol-inline nil, :meta {:arglists (quote ([grid result-chan report-partial-steps?])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 225, :column 9, :end-line 225, :end-column 27, :schema (schema.core/make-fn-schema output-schema27941 [input-schema27942]), :doc "Inputs: [grid :- g/Grid result-chan report-partial-steps?]", :raw-arglists (quote ([grid :- g/Grid result-chan report-partial-steps?]))}, :name snergly.algorithms/maze-hunt-and-kill, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 27, :method-params ([G__27945 G__27946 G__27947]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid result-chan report-partial-steps?])), :line 225, :end-line 225, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid result-chan report-partial-steps?])), :doc "Inputs: [grid :- g/Grid result-chan report-partial-steps?]"}, sidewinder-step {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 75, :column 7, :end-line 75, :end-column 22, :arglists (quote ([grid coord run]))}, :name snergly.algorithms/sidewinder-step, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 22, :method-params ([grid coord run]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid coord run]))}, synchronous-algorithm {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 285, :column 7, :end-line 285, :end-column 28, :arglists (quote ([alg-name]))}, :name snergly.algorithms/synchronous-algorithm, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 28, :method-params ([alg-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 285, :end-line 285, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alg-name]))}, maze-aldous-broder {:schema (schema.core/make-fn-schema output-schema27475 [input-schema27476]), :protocol-inline nil, :meta {:arglists (quote ([grid result-chan report-partial-steps?])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 122, :column 9, :end-line 122, :end-column 27, :schema (schema.core/make-fn-schema output-schema27475 [input-schema27476]), :doc "Inputs: [grid :- g/Grid result-chan report-partial-steps?]", :raw-arglists (quote ([grid :- g/Grid result-chan report-partial-steps?]))}, :name snergly.algorithms/maze-aldous-broder, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 27, :method-params ([G__27479 G__27480 G__27481]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid result-chan report-partial-steps?])), :line 122, :end-line 122, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid result-chan report-partial-steps?])), :doc "Inputs: [grid :- g/Grid result-chan report-partial-steps?]"}, maze-aldous-broder-sync {:schema (schema.core/make-fn-schema output-schema27456 [input-schema27457]), :protocol-inline nil, :meta {:arglists (quote ([grid])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 107, :column 9, :end-line 107, :end-column 32, :schema (schema.core/make-fn-schema output-schema27456 [input-schema27457]), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid", :raw-arglists (quote ([grid :- g/Grid]))}, :name snergly.algorithms/maze-aldous-broder-sync, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 32, :method-params ([G__27460]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid])), :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid])), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid"}, wilsons-carve-passage {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 154, :column 7, :end-line 154, :end-column 28, :arglists (quote ([grid path unvisited result-chan report-partial-steps?]))}, :name snergly.algorithms/wilsons-carve-passage, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 28, :method-params ([grid path unvisited result-chan report-partial-steps?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 5, :fn-var true, :arglists (quote ([grid path unvisited result-chan report-partial-steps?]))}, maze-binary-tree {:schema (schema.core/make-fn-schema output-schema27168 [input-schema27169]), :protocol-inline nil, :meta {:arglists (quote ([grid result-chan report-partial-steps?])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 52, :column 9, :end-line 52, :end-column 25, :schema (schema.core/make-fn-schema output-schema27168 [input-schema27169]), :doc "Inputs: [grid :- g/Grid result-chan report-partial-steps?]", :raw-arglists (quote ([grid :- g/Grid result-chan report-partial-steps?]))}, :name snergly.algorithms/maze-binary-tree, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 25, :method-params ([G__27172 G__27173 G__27174]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid result-chan report-partial-steps?])), :line 52, :end-line 52, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid result-chan report-partial-steps?])), :doc "Inputs: [grid :- g/Grid result-chan report-partial-steps?]"}, algorithms {:name snergly.algorithms/algorithms, :file "src/snergly/algorithms.cljc", :line 11, :column 1, :end-line 11, :end-column 16, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 11, :column 6, :end-line 11, :end-column 16}}, sidewinder-end-run {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 68, :column 7, :end-line 68, :end-column 25, :arglists (quote ([grid run]))}, :name snergly.algorithms/sidewinder-end-run, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 25, :method-params ([grid run]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([grid run]))}, maze-wilsons {:schema (schema.core/make-fn-schema output-schema27796 [input-schema27797]), :protocol-inline nil, :meta {:arglists (quote ([grid result-chan report-partial-steps?])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 181, :column 9, :end-line 181, :end-column 21, :schema (schema.core/make-fn-schema output-schema27796 [input-schema27797]), :doc "Inputs: [grid :- g/Grid result-chan report-partial-steps?]", :raw-arglists (quote ([grid :- g/Grid result-chan report-partial-steps?]))}, :name snergly.algorithms/maze-wilsons, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 21, :method-params ([G__27800 G__27801 G__27802]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid result-chan report-partial-steps?])), :line 181, :end-line 181, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid result-chan report-partial-steps?])), :doc "Inputs: [grid :- g/Grid result-chan report-partial-steps?]"}, maze-binary-tree-sync {:schema (schema.core/make-fn-schema output-schema27152 [input-schema27153]), :protocol-inline nil, :meta {:arglists (quote ([grid])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 48, :column 9, :end-line 48, :end-column 30, :schema (schema.core/make-fn-schema output-schema27152 [input-schema27153]), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid", :raw-arglists (quote ([grid :- g/Grid]))}, :name snergly.algorithms/maze-binary-tree-sync, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 30, :method-params ([G__27156]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid])), :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid])), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid"}, find-path {:schema (schema.core/make-fn-schema output-schema28160 [input-schema28161]), :protocol-inline nil, :meta {:arglists (quote ([grid goal distances])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 259, :column 9, :end-line 259, :end-column 18, :schema (schema.core/make-fn-schema output-schema28160 [input-schema28161]), :doc "Inputs: [grid :- g/Grid goal :- g/CellPosition distances :- g/Distances]\n  Returns: g/Distances", :raw-arglists (quote ([grid :- g/Grid goal :- g/CellPosition distances :- g/Distances]))}, :name snergly.algorithms/find-path, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 18, :method-params ([G__28164 G__28165 G__28166]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid goal :- g/CellPosition distances :- g/Distances])), :line 259, :end-line 259, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid goal distances])), :doc "Inputs: [grid :- g/Grid goal :- g/CellPosition distances :- g/Distances]\n  Returns: g/Distances"}, maze-sidewinder-sync {:schema (schema.core/make-fn-schema output-schema27247 [input-schema27248]), :protocol-inline nil, :meta {:arglists (quote ([grid])), :file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 83, :column 9, :end-line 83, :end-column 29, :schema (schema.core/make-fn-schema output-schema27247 [input-schema27248]), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid", :raw-arglists (quote ([grid :- g/Grid]))}, :name snergly.algorithms/maze-sidewinder-sync, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 29, :method-params ([G__27251]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- g/Grid])), :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid])), :doc "Inputs: [grid :- g/Grid]\n  Returns: g/Grid"}, algorithm-fn {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 291, :column 7, :end-line 291, :end-column 19, :arglists (quote ([name options]))}, :name snergly.algorithms/algorithm-fn, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 19, :method-params ([name options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 291, :end-line 291, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name options]))}, sidewinder-end-run? {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/algorithms.cljc", :line 61, :column 7, :end-line 61, :end-column 26, :arglists (quote ([cell]))}, :name snergly.algorithms/sidewinder-end-run?, :variadic false, :file "src/snergly/algorithms.cljc", :end-column 26, :method-params ([cell]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cell]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, s schema.core, schema.core schema.core}, :cljs.analyzer/constants {:seen #{schema.core/Any :schema report-partial-steps? :algorithm-name :schema.core/error :color :else maze-sidewinder g/Grid maze-recursive-backtrack maze-wilsons-sync :max-coord maze-hunt-and-kill-sync :value find-distances :recur :type maze-hunt-and-kill :east result-chan grid g/Distances goal start :longest :distances :max g/CellPosition :label maze-aldous-broder maze-aldous-broder-sync :error :origin maze-binary-tree maze-wilsons :path-to distances maze-binary-tree-sync find-path maze-sidewinder-sync :north :links}, :order [:else :north :east grid :schema g/Grid maze-binary-tree-sync :type :value :error :schema.core/error :algorithm-name result-chan schema.core/Any report-partial-steps? maze-binary-tree :recur maze-sidewinder-sync maze-sidewinder maze-aldous-broder-sync :links maze-aldous-broder maze-wilsons-sync maze-wilsons maze-hunt-and-kill-sync maze-hunt-and-kill maze-recursive-backtrack start g/CellPosition find-distances g/Distances :origin :max :max-coord goal distances find-path :distances :path-to :longest :label :color]}, :doc nil}