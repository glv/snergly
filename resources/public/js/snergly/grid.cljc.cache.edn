;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name snergly.grid, :imports nil, :requires {s schema.core, schema.core schema.core, util snergly.util, snergly.util snergly.util}, :uses nil, :defs {make-cell {:schema (schema.core/make-fn-schema output-schema220280 [input-schema220281]), :protocol-inline nil, :meta {:arglists (quote ([row column rows columns])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 42, :column 9, :end-line 42, :end-column 18, :schema (schema.core/make-fn-schema output-schema220280 [input-schema220281]), :doc "Inputs: [row column rows columns]\n  Returns: Cell", :raw-arglists (quote ([row column rows columns]))}, :name snergly.grid/make-cell, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 18, :method-params ([G__220284 G__220285 G__220286 G__220287]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([row column rows columns])), :line 42, :end-line 42, :max-fixed-arity 4, :fn-var true, :arglists (quote ([row column rows columns])), :doc "Inputs: [row column rows columns]\n  Returns: Cell"}, grid-cell {:schema (schema.core/make-fn-schema output-schema220408 [input-schema220409 input-schema220414]), :protocol-inline nil, :meta {:schema (schema.core/make-fn-schema output-schema220408 [input-schema220409 input-schema220414]), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([G__220412 G__220413] [G__220417 G__220418 G__220419]), :arglists ([G__220412 G__220413] [G__220417 G__220418 G__220419]), :arglists-meta (nil nil)}, :column 9, :raw-arglists (quote ([grid [row column]] [grid row column])), :line 74, :end-line 74, :arglists (quote ([grid [row column]] [grid row column])), :doc "Inputs: ([grid [row column]] [grid row column])\n  Returns: Cell"}, :name snergly.grid/grid-cell, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([G__220412 G__220413] [G__220417 G__220418 G__220419]), :arglists ([G__220412 G__220413] [G__220417 G__220418 G__220419]), :arglists-meta (nil nil)}, :method-params ([G__220412 G__220413] [G__220417 G__220418 G__220419]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid [row column]] [grid row column])), :line 74, :end-line 74, :max-fixed-arity 3, :fn-var true, :arglists ([G__220412 G__220413] [G__220417 G__220418 G__220419]), :doc "Inputs: ([grid [row column]] [grid row column])\n  Returns: Cell"}, new? {:schema (schema.core/make-fn-schema output-schema220653 [input-schema220654]), :protocol-inline nil, :meta {:arglists (quote ([grid])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 110, :column 9, :end-line 110, :end-column 13, :schema (schema.core/make-fn-schema output-schema220653 [input-schema220654]), :doc "Inputs: [grid :- Grid]", :raw-arglists (quote ([grid :- Grid]))}, :name snergly.grid/new?, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 13, :method-params ([G__220657]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- Grid])), :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid])), :doc "Inputs: [grid :- Grid]"}, begin-step {:schema (schema.core/make-fn-schema output-schema220637 [input-schema220638]), :protocol-inline nil, :meta {:arglists (quote ([grid])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 106, :column 9, :end-line 106, :end-column 19, :schema (schema.core/make-fn-schema output-schema220637 [input-schema220638]), :doc "Inputs: [grid :- Grid]\n  Returns: Grid", :raw-arglists (quote ([grid :- Grid]))}, :name snergly.grid/begin-step, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 19, :method-params ([G__220641]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- Grid])), :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid])), :doc "Inputs: [grid :- Grid]\n  Returns: Grid"}, grid-annotate-cells {:schema (schema.core/make-fn-schema output-schema220744 [input-schema220745]), :protocol-inline nil, :meta {:arglists (quote ([grid label-specs])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 141, :column 9, :end-line 141, :end-column 28, :schema (schema.core/make-fn-schema output-schema220744 [input-schema220745]), :doc "Inputs: [grid :- Grid label-specs :- {s/Keyword Distances}]\n  Returns: Grid", :raw-arglists (quote ([grid :- Grid label-specs :- {s/Keyword Distances}]))}, :name snergly.grid/grid-annotate-cells, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 28, :method-params ([G__220748 G__220749]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- Grid label-specs :- {s/Keyword Distances}])), :line 141, :end-line 141, :max-fixed-arity 2, :fn-var true, :arglists (quote ([grid label-specs])), :doc "Inputs: [grid :- Grid label-specs :- {s/Keyword Distances}]\n  Returns: Grid"}, grid-row-coords {:schema (schema.core/make-fn-schema output-schema220506 [input-schema220507]), :protocol-inline nil, :meta {:arglists (quote ([{:keys [rows columns]}])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 89, :column 9, :end-line 89, :end-column 24, :schema (schema.core/make-fn-schema output-schema220506 [input-schema220507]), :doc "Inputs: [{:keys [rows columns]}]\n  Returns: [[CellPosition]]", :raw-arglists (quote ([{:keys [rows columns]}]))}, :name snergly.grid/grid-row-coords, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 24, :method-params ([G__220510]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([{:keys [rows columns]}])), :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [rows columns]}])), :doc "Inputs: [{:keys [rows columns]}]\n  Returns: [[CellPosition]]"}, Distances {:name snergly.grid/Distances, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 34, :column 1, :end-line 34, :end-column 15, :meta {:file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 34, :column 6, :end-line 34, :end-column 15}, :doc "Schema for a distance map"}, CellPosition {:name snergly.grid/CellPosition, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 9, :column 1, :end-line 9, :end-column 18, :meta {:file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 9, :column 6, :end-line 9, :end-column 18}, :doc "Schema for cell [row col] coordinates"}, NonNegativeInt {:name snergly.grid/NonNegativeInt, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 5, :column 1, :end-line 5, :end-column 20, :meta {:file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 5, :column 6, :end-line 5, :end-column 20}, :doc "Schema for cell coordinates and sizes"}, linked? {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 130, :column 7, :end-line 130, :end-column 14, :arglists (quote ([cell other-cell-coord]))}, :name snergly.grid/linked?, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 14, :method-params ([cell other-cell-coord]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cell other-cell-coord]))}, make-grid {:schema (schema.core/make-fn-schema output-schema220335 [input-schema220336]), :protocol-inline nil, :meta {:arglists (quote ([rows columns])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 58, :column 9, :end-line 58, :end-column 18, :schema (schema.core/make-fn-schema output-schema220335 [input-schema220336]), :doc "Inputs: [rows columns]\n  Returns: Grid\n\n  Creates and returns a new grid with the specified row and column sizes.", :raw-arglists (quote ([rows columns]))}, :name snergly.grid/make-grid, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 18, :method-params ([G__220339 G__220340]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([rows columns])), :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rows columns])), :doc "Inputs: [rows columns]\n  Returns: Grid\n\n  Creates and returns a new grid with the specified row and column sizes."}, random-coord {:schema (schema.core/make-fn-schema output-schema220450 [input-schema220451]), :protocol-inline nil, :meta {:arglists (quote ([{:keys [rows columns], :as grid}])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 79, :column 9, :end-line 79, :end-column 21, :schema (schema.core/make-fn-schema output-schema220450 [input-schema220451]), :doc "Inputs: [{:keys [rows columns], :as grid}]\n  Returns: CellPosition", :raw-arglists (quote ([{:keys [rows columns], :as grid}]))}, :name snergly.grid/random-coord, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 21, :method-params ([G__220454]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([{:keys [rows columns], :as grid}])), :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [rows columns], :as grid}])), :doc "Inputs: [{:keys [rows columns], :as grid}]\n  Returns: CellPosition"}, link-cells {:schema (schema.core/make-fn-schema output-schema220685 [input-schema220686]), :protocol-inline nil, :meta {:arglists (quote ([{:keys [cells changed-cells], :as grid} {cell-coord :coord, cell-links :links, :as cell} neighbor-coord])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 117, :column 9, :end-line 117, :end-column 19, :schema (schema.core/make-fn-schema output-schema220685 [input-schema220686]), :doc "Inputs: [{:keys [cells changed-cells], :as grid} :- Grid {cell-coord :coord, cell-links :links, :as cell} :- Cell neighbor-coord :- CellPosition]\n  Returns: Grid", :raw-arglists (quote ([{:keys [cells changed-cells], :as grid} :- Grid {cell-coord :coord, cell-links :links, :as cell} :- Cell neighbor-coord :- CellPosition]))}, :name snergly.grid/link-cells, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 19, :method-params ([G__220689 G__220690 G__220691]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([{:keys [cells changed-cells], :as grid} :- Grid {cell-coord :coord, cell-links :links, :as cell} :- Cell neighbor-coord :- CellPosition])), :line 117, :end-line 117, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [cells changed-cells], :as grid} {cell-coord :coord, cell-links :links, :as cell} neighbor-coord])), :doc "Inputs: [{:keys [cells changed-cells], :as grid} :- Grid {cell-coord :coord, cell-links :links, :as cell} :- Cell neighbor-coord :- CellPosition]\n  Returns: Grid"}, grid-size {:schema (schema.core/make-fn-schema output-schema220478 [input-schema220479]), :protocol-inline nil, :meta {:arglists (quote ([{:keys [rows columns]}])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 85, :column 9, :end-line 85, :end-column 18, :schema (schema.core/make-fn-schema output-schema220478 [input-schema220479]), :doc "Inputs: [{:keys [rows columns]}]\n  Returns: NonNegativeInt", :raw-arglists (quote ([{:keys [rows columns]}]))}, :name snergly.grid/grid-size, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 18, :method-params ([G__220482]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([{:keys [rows columns]}])), :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [rows columns]}])), :doc "Inputs: [{:keys [rows columns]}]\n  Returns: NonNegativeInt"}, cell-index {:schema (schema.core/make-fn-schema output-schema220366 [input-schema220367 input-schema220372]), :protocol-inline nil, :meta {:schema (schema.core/make-fn-schema output-schema220366 [input-schema220367 input-schema220372]), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([G__220370 G__220371] [G__220375 G__220376 G__220377]), :arglists ([G__220370 G__220371] [G__220375 G__220376 G__220377]), :arglists-meta (nil nil)}, :column 9, :raw-arglists (quote ([grid [row column]] [grid row column])), :line 70, :end-line 70, :arglists (quote ([grid [row column]] [grid row column])), :doc "Inputs: ([grid [row column]] [grid row column])\n  Returns: NonNegativeInt"}, :name snergly.grid/cell-index, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([G__220370 G__220371] [G__220375 G__220376 G__220377]), :arglists ([G__220370 G__220371] [G__220375 G__220376 G__220377]), :arglists-meta (nil nil)}, :method-params ([G__220370 G__220371] [G__220375 G__220376 G__220377]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid [row column]] [grid row column])), :line 70, :end-line 70, :max-fixed-arity 3, :fn-var true, :arglists ([G__220370 G__220371] [G__220375 G__220376 G__220377]), :doc "Inputs: ([grid [row column]] [grid row column])\n  Returns: NonNegativeInt"}, grid-coords {:schema (schema.core/make-fn-schema output-schema220577 [input-schema220578]), :protocol-inline nil, :meta {:arglists (quote ([{:keys [rows columns]}])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 96, :column 9, :end-line 96, :end-column 20, :schema (schema.core/make-fn-schema output-schema220577 [input-schema220578]), :doc "Inputs: [{:keys [rows columns]}]\n  Returns: [CellPosition]", :raw-arglists (quote ([{:keys [rows columns]}]))}, :name snergly.grid/grid-coords, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 20, :method-params ([G__220581]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([{:keys [rows columns]}])), :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [rows columns]}])), :doc "Inputs: [{:keys [rows columns]}]\n  Returns: [CellPosition]"}, xform-values {:schema (schema.core/make-fn-schema output-schema220727 [input-schema220728]), :protocol-inline nil, :meta {:arglists (quote ([value-xform value-map])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 133, :column 9, :end-line 133, :end-column 21, :schema (schema.core/make-fn-schema output-schema220727 [input-schema220728]), :doc "Inputs: [value-xform value-map :- Distances]\n  Returns: Distances", :raw-arglists (quote ([value-xform value-map :- Distances]))}, :name snergly.grid/xform-values, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 21, :method-params ([G__220731 G__220732]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([value-xform value-map :- Distances])), :line 133, :end-line 133, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value-xform value-map])), :doc "Inputs: [value-xform value-map :- Distances]\n  Returns: Distances"}, Cell {:name snergly.grid/Cell, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 13, :column 1, :end-line 13, :end-column 10, :meta {:file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 13, :column 6, :end-line 13, :end-column 10}, :doc "Schema for maze cells"}, print-grid {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 158, :column 7, :end-line 158, :end-column 17, :arglists (quote ([grid] [{columns :columns, :as grid} print-coords?])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([grid] [{columns :columns, :as grid} print-coords?]), :arglists ([grid] [{columns :columns, :as grid} print-coords?]), :arglists-meta (nil nil)}}, :name snergly.grid/print-grid, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([grid] [{columns :columns, :as grid} print-coords?]), :arglists ([grid] [{columns :columns, :as grid} print-coords?]), :arglists-meta (nil nil)}, :method-params ([grid] [{columns :columns, :as grid} print-coords?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 2, :fn-var true, :arglists ([grid] [{columns :columns, :as grid} print-coords?])}, grid-deadends {:schema (schema.core/make-fn-schema output-schema220621 [input-schema220622]), :protocol-inline nil, :meta {:arglists (quote ([grid])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 101, :column 9, :end-line 101, :end-column 22, :schema (schema.core/make-fn-schema output-schema220621 [input-schema220622]), :doc "Inputs: [grid]\n  Returns: [Cell]", :raw-arglists (quote ([grid]))}, :name snergly.grid/grid-deadends, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 22, :method-params ([G__220625]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid])), :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid])), :doc "Inputs: [grid]\n  Returns: [Cell]"}, Grid {:name snergly.grid/Grid, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 25, :column 1, :end-line 25, :end-column 10, :meta {:file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 25, :column 6, :end-line 25, :end-column 10}, :doc "Schema for maze grid"}, intlabel {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 154, :column 7, :end-line 154, :end-column 15, :arglists (quote ([val]))}, :name snergly.grid/intlabel, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 15, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val]))}, changed? {:schema (schema.core/make-fn-schema output-schema220669 [input-schema220670]), :protocol-inline nil, :meta {:arglists (quote ([grid])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 113, :column 9, :end-line 113, :end-column 17, :schema (schema.core/make-fn-schema output-schema220669 [input-schema220670]), :doc "Inputs: [grid :- Grid]", :raw-arglists (quote ([grid :- Grid]))}, :name snergly.grid/changed?, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 17, :method-params ([G__220673]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- Grid])), :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid])), :doc "Inputs: [grid :- Grid]"}, cell-neighbors {:schema (schema.core/make-fn-schema output-schema220299 [input-schema220300 input-schema220304]), :protocol-inline nil, :meta {:schema (schema.core/make-fn-schema output-schema220299 [input-schema220300 input-schema220304]), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([G__220303] [G__220307 G__220308]), :arglists ([G__220303] [G__220307 G__220308]), :arglists-meta (nil nil)}, :column 9, :raw-arglists (quote ([cell] [cell :- Cell directions :- [(s/enum :north :south :east :west)]])), :line 52, :end-line 52, :arglists (quote ([cell] [cell directions])), :doc "Inputs: ([cell] [cell :- Cell directions :- [(s/enum :north :south :east :west)]])\n  Returns: [CellPosition]"}, :name snergly.grid/cell-neighbors, :variadic false, :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([G__220303] [G__220307 G__220308]), :arglists ([G__220303] [G__220307 G__220308]), :arglists-meta (nil nil)}, :method-params ([G__220303] [G__220307 G__220308]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([cell] [cell :- Cell directions :- [(s/enum :north :south :east :west)]])), :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists ([G__220303] [G__220307 G__220308]), :doc "Inputs: ([cell] [cell :- Cell directions :- [(s/enum :north :south :east :west)]])\n  Returns: [CellPosition]"}}, :require-macros {s schema.core, schema.core schema.core}, :cljs.analyzer/constants {:seen #{s/Keyword make-cell schema.core/Any :schema :coord grid-cell cell :algorithm-name :schema.core/error new? begin-step :west :south arg1 :changed-cells grid-annotate-cells grid-row-coords row Distances :columns :max-coord value-xform :value value-map :type CellPosition :east grid columns NonNegativeInt :rows neighbor-coord directions label-specs :Cell make-grid random-coord :max :label link-cells :Grid column grid-size cell-index rows grid-coords :error :origin xform-values :cells Cell s/enum arg0 :doc grid-deadends Grid changed? cell-neighbors :north :links}, :order [:type :coord :north :south :east :west :links :Cell :algorithm-name :rows :columns :cells :changed-cells :Grid :origin :max-coord :max row :schema schema.core/Any column rows columns make-cell Cell :value :error :schema.core/error cell directions s/enum cell-neighbors CellPosition make-grid :doc Grid grid arg1 cell-index NonNegativeInt grid-cell arg0 random-coord grid-size grid-row-coords grid-coords grid-deadends begin-step new? changed? neighbor-coord link-cells value-xform value-map Distances xform-values label-specs s/Keyword grid-annotate-cells :label]}, :doc nil}