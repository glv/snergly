;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name snergly.grid, :imports nil, :requires {s schema.core, schema.core schema.core, util snergly.util, snergly.util snergly.util}, :uses nil, :defs {make-cell {:schema (schema.core/make-fn-schema output-schema30384 [input-schema30385]), :protocol-inline nil, :meta {:arglists (quote ([row column rows columns])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 41, :column 9, :end-line 41, :end-column 18, :schema (schema.core/make-fn-schema output-schema30384 [input-schema30385]), :doc "Inputs: [row column rows columns]\n  Returns: Cell", :raw-arglists (quote ([row column rows columns]))}, :name snergly.grid/make-cell, :variadic false, :file "src/snergly/grid.cljc", :end-column 18, :method-params ([G__30388 G__30389 G__30390 G__30391]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([row column rows columns])), :line 41, :end-line 41, :max-fixed-arity 4, :fn-var true, :arglists (quote ([row column rows columns])), :doc "Inputs: [row column rows columns]\n  Returns: Cell"}, grid-cell {:schema (schema.core/make-fn-schema output-schema30512 [input-schema30513 input-schema30518]), :protocol-inline nil, :meta {:schema (schema.core/make-fn-schema output-schema30512 [input-schema30513 input-schema30518]), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([G__30516 G__30517] [G__30521 G__30522 G__30523]), :arglists ([G__30516 G__30517] [G__30521 G__30522 G__30523]), :arglists-meta (nil nil)}, :column 9, :raw-arglists (quote ([grid [row column]] [grid row column])), :line 72, :end-line 72, :arglists (quote ([grid [row column]] [grid row column])), :doc "Inputs: ([grid [row column]] [grid row column])\n  Returns: Cell"}, :name snergly.grid/grid-cell, :variadic false, :file "src/snergly/grid.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([G__30516 G__30517] [G__30521 G__30522 G__30523]), :arglists ([G__30516 G__30517] [G__30521 G__30522 G__30523]), :arglists-meta (nil nil)}, :method-params ([G__30516 G__30517] [G__30521 G__30522 G__30523]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid [row column]] [grid row column])), :line 72, :end-line 72, :max-fixed-arity 3, :fn-var true, :arglists ([G__30516 G__30517] [G__30521 G__30522 G__30523]), :doc "Inputs: ([grid [row column]] [grid row column])\n  Returns: Cell"}, grid-annotate-cells {:schema (schema.core/make-fn-schema output-schema30800 [input-schema30801]), :protocol-inline nil, :meta {:arglists (quote ([grid label-specs])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 127, :column 9, :end-line 127, :end-column 28, :schema (schema.core/make-fn-schema output-schema30800 [input-schema30801]), :doc "Inputs: [grid :- Grid label-specs :- {s/Keyword Distances}]\n  Returns: Grid", :raw-arglists (quote ([grid :- Grid label-specs :- {s/Keyword Distances}]))}, :name snergly.grid/grid-annotate-cells, :variadic false, :file "src/snergly/grid.cljc", :end-column 28, :method-params ([G__30804 G__30805]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid :- Grid label-specs :- {s/Keyword Distances}])), :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists (quote ([grid label-specs])), :doc "Inputs: [grid :- Grid label-specs :- {s/Keyword Distances}]\n  Returns: Grid"}, grid-row-coords {:schema (schema.core/make-fn-schema output-schema30610 [input-schema30611]), :protocol-inline nil, :meta {:arglists (quote ([{:keys [rows columns]}])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 87, :column 9, :end-line 87, :end-column 24, :schema (schema.core/make-fn-schema output-schema30610 [input-schema30611]), :doc "Inputs: [{:keys [rows columns]}]\n  Returns: [[CellPosition]]", :raw-arglists (quote ([{:keys [rows columns]}]))}, :name snergly.grid/grid-row-coords, :variadic false, :file "src/snergly/grid.cljc", :end-column 24, :method-params ([G__30614]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([{:keys [rows columns]}])), :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [rows columns]}])), :doc "Inputs: [{:keys [rows columns]}]\n  Returns: [[CellPosition]]"}, Distances {:name snergly.grid/Distances, :file "src/snergly/grid.cljc", :line 33, :column 1, :end-line 33, :end-column 15, :meta {:file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 33, :column 6, :end-line 33, :end-column 15}, :doc "Schema for a distance map"}, CellPosition {:name snergly.grid/CellPosition, :file "src/snergly/grid.cljc", :line 9, :column 1, :end-line 9, :end-column 18, :meta {:file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 9, :column 6, :end-line 9, :end-column 18}, :doc "Schema for cell [row col] coordinates"}, NonNegativeInt {:name snergly.grid/NonNegativeInt, :file "src/snergly/grid.cljc", :line 5, :column 1, :end-line 5, :end-column 20, :meta {:file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 5, :column 6, :end-line 5, :end-column 20}, :doc "Schema for cell coordinates and sizes"}, linked? {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 116, :column 7, :end-line 116, :end-column 14, :arglists (quote ([cell other-cell-coord]))}, :name snergly.grid/linked?, :variadic false, :file "src/snergly/grid.cljc", :end-column 14, :method-params ([cell other-cell-coord]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cell other-cell-coord]))}, make-grid {:schema (schema.core/make-fn-schema output-schema30439 [input-schema30440]), :protocol-inline nil, :meta {:arglists (quote ([rows columns])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 57, :column 9, :end-line 57, :end-column 18, :schema (schema.core/make-fn-schema output-schema30439 [input-schema30440]), :doc "Inputs: [rows columns]\n  Returns: Grid\n\n  Creates and returns a new grid with the specified row and column sizes.", :raw-arglists (quote ([rows columns]))}, :name snergly.grid/make-grid, :variadic false, :file "src/snergly/grid.cljc", :end-column 18, :method-params ([G__30443 G__30444]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([rows columns])), :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rows columns])), :doc "Inputs: [rows columns]\n  Returns: Grid\n\n  Creates and returns a new grid with the specified row and column sizes."}, random-coord {:schema (schema.core/make-fn-schema output-schema30554 [input-schema30555]), :protocol-inline nil, :meta {:arglists (quote ([{:keys [rows columns], :as grid}])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 77, :column 9, :end-line 77, :end-column 21, :schema (schema.core/make-fn-schema output-schema30554 [input-schema30555]), :doc "Inputs: [{:keys [rows columns], :as grid}]\n  Returns: CellPosition", :raw-arglists (quote ([{:keys [rows columns], :as grid}]))}, :name snergly.grid/random-coord, :variadic false, :file "src/snergly/grid.cljc", :end-column 21, :method-params ([G__30558]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([{:keys [rows columns], :as grid}])), :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [rows columns], :as grid}])), :doc "Inputs: [{:keys [rows columns], :as grid}]\n  Returns: CellPosition"}, link-cells {:schema (schema.core/make-fn-schema output-schema30741 [input-schema30742]), :protocol-inline nil, :meta {:arglists (quote ([{cells :cells, :as grid} {cell-coord :coord, cell-links :links, :as cell} neighbor-coord])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 104, :column 9, :end-line 104, :end-column 19, :schema (schema.core/make-fn-schema output-schema30741 [input-schema30742]), :doc "Inputs: [{cells :cells, :as grid} :- Grid {cell-coord :coord, cell-links :links, :as cell} :- Cell neighbor-coord :- CellPosition]\n  Returns: Grid", :raw-arglists (quote ([{cells :cells, :as grid} :- Grid {cell-coord :coord, cell-links :links, :as cell} :- Cell neighbor-coord :- CellPosition]))}, :name snergly.grid/link-cells, :variadic false, :file "src/snergly/grid.cljc", :end-column 19, :method-params ([G__30745 G__30746 G__30747]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([{cells :cells, :as grid} :- Grid {cell-coord :coord, cell-links :links, :as cell} :- Cell neighbor-coord :- CellPosition])), :line 104, :end-line 104, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{cells :cells, :as grid} {cell-coord :coord, cell-links :links, :as cell} neighbor-coord])), :doc "Inputs: [{cells :cells, :as grid} :- Grid {cell-coord :coord, cell-links :links, :as cell} :- Cell neighbor-coord :- CellPosition]\n  Returns: Grid"}, grid-size {:schema (schema.core/make-fn-schema output-schema30582 [input-schema30583]), :protocol-inline nil, :meta {:arglists (quote ([{:keys [rows columns]}])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 83, :column 9, :end-line 83, :end-column 18, :schema (schema.core/make-fn-schema output-schema30582 [input-schema30583]), :doc "Inputs: [{:keys [rows columns]}]\n  Returns: NonNegativeInt", :raw-arglists (quote ([{:keys [rows columns]}]))}, :name snergly.grid/grid-size, :variadic false, :file "src/snergly/grid.cljc", :end-column 18, :method-params ([G__30586]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([{:keys [rows columns]}])), :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [rows columns]}])), :doc "Inputs: [{:keys [rows columns]}]\n  Returns: NonNegativeInt"}, cell-index {:schema (schema.core/make-fn-schema output-schema30470 [input-schema30471 input-schema30476]), :protocol-inline nil, :meta {:schema (schema.core/make-fn-schema output-schema30470 [input-schema30471 input-schema30476]), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([G__30474 G__30475] [G__30479 G__30480 G__30481]), :arglists ([G__30474 G__30475] [G__30479 G__30480 G__30481]), :arglists-meta (nil nil)}, :column 9, :raw-arglists (quote ([grid [row column]] [grid row column])), :line 68, :end-line 68, :arglists (quote ([grid [row column]] [grid row column])), :doc "Inputs: ([grid [row column]] [grid row column])\n  Returns: NonNegativeInt"}, :name snergly.grid/cell-index, :variadic false, :file "src/snergly/grid.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([G__30474 G__30475] [G__30479 G__30480 G__30481]), :arglists ([G__30474 G__30475] [G__30479 G__30480 G__30481]), :arglists-meta (nil nil)}, :method-params ([G__30474 G__30475] [G__30479 G__30480 G__30481]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid [row column]] [grid row column])), :line 68, :end-line 68, :max-fixed-arity 3, :fn-var true, :arglists ([G__30474 G__30475] [G__30479 G__30480 G__30481]), :doc "Inputs: ([grid [row column]] [grid row column])\n  Returns: NonNegativeInt"}, grid-coords {:schema (schema.core/make-fn-schema output-schema30681 [input-schema30682]), :protocol-inline nil, :meta {:arglists (quote ([{:keys [rows columns]}])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 94, :column 9, :end-line 94, :end-column 20, :schema (schema.core/make-fn-schema output-schema30681 [input-schema30682]), :doc "Inputs: [{:keys [rows columns]}]\n  Returns: [CellPosition]", :raw-arglists (quote ([{:keys [rows columns]}]))}, :name snergly.grid/grid-coords, :variadic false, :file "src/snergly/grid.cljc", :end-column 20, :method-params ([G__30685]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([{:keys [rows columns]}])), :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [rows columns]}])), :doc "Inputs: [{:keys [rows columns]}]\n  Returns: [CellPosition]"}, xform-values {:schema (schema.core/make-fn-schema output-schema30783 [input-schema30784]), :protocol-inline nil, :meta {:arglists (quote ([value-xform value-map])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 119, :column 9, :end-line 119, :end-column 21, :schema (schema.core/make-fn-schema output-schema30783 [input-schema30784]), :doc "Inputs: [value-xform value-map :- Distances]\n  Returns: Distances", :raw-arglists (quote ([value-xform value-map :- Distances]))}, :name snergly.grid/xform-values, :variadic false, :file "src/snergly/grid.cljc", :end-column 21, :method-params ([G__30787 G__30788]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([value-xform value-map :- Distances])), :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value-xform value-map])), :doc "Inputs: [value-xform value-map :- Distances]\n  Returns: Distances"}, Cell {:name snergly.grid/Cell, :file "src/snergly/grid.cljc", :line 13, :column 1, :end-line 13, :end-column 10, :meta {:file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 13, :column 6, :end-line 13, :end-column 10}, :doc "Schema for maze cells"}, print-grid {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 144, :column 7, :end-line 144, :end-column 17, :arglists (quote ([grid] [{columns :columns, :as grid} print-coords?])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([grid] [{columns :columns, :as grid} print-coords?]), :arglists ([grid] [{columns :columns, :as grid} print-coords?]), :arglists-meta (nil nil)}}, :name snergly.grid/print-grid, :variadic false, :file "src/snergly/grid.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([grid] [{columns :columns, :as grid} print-coords?]), :arglists ([grid] [{columns :columns, :as grid} print-coords?]), :arglists-meta (nil nil)}, :method-params ([grid] [{columns :columns, :as grid} print-coords?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 2, :fn-var true, :arglists ([grid] [{columns :columns, :as grid} print-coords?])}, grid-deadends {:schema (schema.core/make-fn-schema output-schema30725 [input-schema30726]), :protocol-inline nil, :meta {:arglists (quote ([grid])), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 99, :column 9, :end-line 99, :end-column 22, :schema (schema.core/make-fn-schema output-schema30725 [input-schema30726]), :doc "Inputs: [grid]\n  Returns: [Cell]", :raw-arglists (quote ([grid]))}, :name snergly.grid/grid-deadends, :variadic false, :file "src/snergly/grid.cljc", :end-column 22, :method-params ([G__30729]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([grid])), :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid])), :doc "Inputs: [grid]\n  Returns: [Cell]"}, Grid {:name snergly.grid/Grid, :file "src/snergly/grid.cljc", :line 25, :column 1, :end-line 25, :end-column 10, :meta {:file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 25, :column 6, :end-line 25, :end-column 10}, :doc "Schema for maze grid"}, intlabel {:protocol-inline nil, :meta {:file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :line 140, :column 7, :end-line 140, :end-column 15, :arglists (quote ([val]))}, :name snergly.grid/intlabel, :variadic false, :file "src/snergly/grid.cljc", :end-column 15, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val]))}, cell-neighbors {:schema (schema.core/make-fn-schema output-schema30403 [input-schema30404 input-schema30408]), :protocol-inline nil, :meta {:schema (schema.core/make-fn-schema output-schema30403 [input-schema30404 input-schema30408]), :file "/Users/glv/Projects/snergly/src/snergly/grid.cljc", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([G__30407] [G__30411 G__30412]), :arglists ([G__30407] [G__30411 G__30412]), :arglists-meta (nil nil)}, :column 9, :raw-arglists (quote ([cell] [cell :- Cell directions :- [(s/enum :north :south :east :west)]])), :line 51, :end-line 51, :arglists (quote ([cell] [cell directions])), :doc "Inputs: ([cell] [cell :- Cell directions :- [(s/enum :north :south :east :west)]])\n  Returns: [CellPosition]"}, :name snergly.grid/cell-neighbors, :variadic false, :file "src/snergly/grid.cljc", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([G__30407] [G__30411 G__30412]), :arglists ([G__30407] [G__30411 G__30412]), :arglists-meta (nil nil)}, :method-params ([G__30407] [G__30411 G__30412]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([cell] [cell :- Cell directions :- [(s/enum :north :south :east :west)]])), :line 51, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists ([G__30407] [G__30411 G__30412]), :doc "Inputs: ([cell] [cell :- Cell directions :- [(s/enum :north :south :east :west)]])\n  Returns: [CellPosition]"}}, :require-macros {s schema.core, schema.core schema.core}, :cljs.analyzer/constants {:seen #{s/Keyword make-cell schema.core/Any :schema :coord grid-cell cell :algorithm-name :schema.core/error :west :south arg1 grid-annotate-cells grid-row-coords row Distances :columns :max-coord value-xform :value value-map :type CellPosition :east grid columns NonNegativeInt :rows neighbor-coord directions label-specs :Cell make-grid random-coord :max :label link-cells :Grid column grid-size cell-index rows grid-coords :error :origin xform-values :cells Cell s/enum arg0 :doc grid-deadends Grid cell-neighbors :north :links}, :order [:type :coord :north :south :east :west :links :Cell :algorithm-name :rows :columns :cells :Grid :origin :max-coord :max row :schema schema.core/Any column rows columns make-cell Cell :value :error :schema.core/error cell directions s/enum cell-neighbors CellPosition make-grid :doc Grid grid arg1 cell-index NonNegativeInt grid-cell arg0 random-coord grid-size grid-row-coords grid-coords grid-deadends neighbor-coord link-cells value-xform value-map Distances xform-values label-specs s/Keyword grid-annotate-cells :label]}, :doc nil}